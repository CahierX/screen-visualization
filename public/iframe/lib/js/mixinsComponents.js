/*
 * @Descripttion:
 * @Author: cbz
 * @Date: 2020-06-01 10:23:02
 * @LastEditors: cbz
 * @LastEditTime: 2021-03-26 16:39:45
 */
const mixinsComponents = {
    data() {
        return {
            chartsZoom: {},
            lineBarPie: ['bgBar', 'singleBar', 'mulityHorBar', 'stackHorBar', 'bar', 'stackBar', 'basicLine', 'line', 'stackLine', 'notSmoothLine', 'dataZoomLine', 'lineAndBar', 'pie',
                'circlePie', 'circleRadiusPie', 'percentPie', 'percent2Pie', 'percent3Pie', 'rosePie', 'roseHalfPie', 'dot', 'textCloud', 'textCloud1', 'area', 'runInMap', 'cityMap'
            ]
        }
    },
    methods: {
        fixZomm(myChart, option, id) {
            // 修复图表的zoom
            // 每个图表的start end 都不一样
            if (!option.dataZoom) return;
            if (!this.chartsZoom[id]) {
                this.chartsZoom[id] = {}
            }
            option.dataZoom[0].start = this.chartsZoom[id].start;
            option.dataZoom[0].end = this.chartsZoom[id].end;
            if (this.chartsZoom[id].start == undefined) {
                option.dataZoom[0].start = option.dataZoom[1].start
            }
            if (this.chartsZoom[id].end == undefined) {
                option.dataZoom[0].end = option.dataZoom[1].end
            }

            myChart.on('dataZoom', (event) => {
                if (event.batch) {
                    this.chartsZoom[id].start = event.batch[0].start;
                    this.chartsZoom[id].end = event.batch[0].end;
                } else {
                    this.chartsZoom[id].start = event.start;
                    this.chartsZoom[id].end = event.end;
                };
            });
        },
        async initChart(myChart, chartOption, option, id, name) {
            // echarts组件公用初始化代码'
            let xOry = 'xAxis'
            option.data.forEach((item, index) => {
                if (!option.series[index]) {
                    option.series.push(JSON.parse(JSON.stringify(option.series[0])))
                }
            })
            chartOption = this.MergeRecursive(JSON.parse(JSON.stringify(option)), JSON.parse(JSON.stringify(chartOption))) // 合并基础配置和组件内自定义配置
            option.data.forEach((item, index) => {
                chartOption.series[index] = {...chartOption.series[index], ...item }
            })
            delete chartOption.data
            if (option.legend) {
                if (option.series[0].type === 'pie') {
                    option.data[0].data.forEach(item => {
                        chartOption.legend.data.push(item.name) // 当为饼图时循环data name作为legend的数据
                    })
                } else {
                    chartOption.series.map(item => {
                        chartOption.legend.data.push(item.name) // name作为legend的数据
                    })
                }

            } else {
                delete chartOption.legend
            }
            switch (name) {
                case 'lineAndBar':
                    {
                        chartOption.xAxis.boundaryGap = true
                        chartOption.series[1].type = 'bar'
                        chartOption.series[1].barWidth = "25%"
                    };
                    break;
                case 'mulityHorBar':
                case 'stackHorBar':
                    {
                        delete chartOption.xAxis.data // 删除xAxis的data 属性 让图表横着摆
                        xOry = 'yAxis'
                    };
                    break;
                case 'percentPie':
                    {
                        let sum = 0
                        option.data[0].data.map(item => {
                            sum += item.value
                        })
                        chartOption.title.text = `${option.data[0].data[0].value / sum * 100}%`
                    };
                    break;
                case 'percent2Pie':
                    {
                        chartOption.series.push({
                            type: 'pie',
                            radius: ['40%', '70%'],
                            label: {
                                show: false,
                            },
                            labelLine: {
                                show: false
                            },
                            data: [{ value: 100, name: '底图背景' }]
                        })
                        chartOption.series.push({
                            type: 'pie',
                            radius: ['50%', '55%'],
                            label: {
                                show: false,
                            },
                            labelLine: {
                                show: false
                            },
                            data: [{ value: 100, name: '中间细环' }]
                        })
                    };
                    break;
                case 'percent3Pie':
                    {
                        option.graphic.style.fill = chartOption.color[0]
                        // chartOption.series[0].data[0].itemStyle = { opacity: 1 } // 第1个参数透明
                        // chartOption.series[0].data[1].itemStyle = { opacity: 0.1 } // 第二个参数透明
                    };
                    break;
                case 'singleHorBar':
                    {
                        xOry = 'yAxis';
                    };
                    break;
                case 'roseHalfPie':
                    {
                        let sum = 0
                        chartOption.series[0].data.forEach(da => {
                            if (da.name !== null) {
                                sum += da.value
                            }
                        })
                        if (chartOption.series[0].data[chartOption.series[0].data.length - 1].name !== null) {
                            chartOption.series[0].data.push({
                                name: null,
                                value: sum,
                                itemStyle: {
                                    color: 'rgba(0,0,0,0)',
                                },
                                tooltip: {
                                    show: false
                                }
                            })
                        } else {
                            chartOption.series[0].data[chartOption.series[0].data.length - 1].value = sum
                        }

                    };
                    break;
                case 'textCloud':
                case 'textCloud1':
                    {
                        chartOption.series.map(item => {
                            item.data.forEach((it, index) => {
                                it.textStyle = { color: option.color[index] }
                            })
                        })
                    };
                    break;
                case 'runInMap':
                case 'cityMap':
                    {
                        const placesMap = { "全国": "100000", "东城区": "110101", "西城区": "110102", "朝阳区": "220104", "丰台区": "110106", "石景山区": "110107", "海淀区": "110108", "门头沟区": "110109", "房山区": "110111", "通州区": "320612", "顺义区": "110113", "昌平区": "110114", "大兴区": "110115", "怀柔区": "110116", "平谷区": "110117", "密云区": "110118", "延庆区": "110119", "市辖区": "5001", "北京市": "11", "和平区": "210102", "河东区": "371312", "河西区": "120103", "南开区": "120104", "河北区": "120105", "红桥区": "120106", "东丽区": "120110", "西青区": "120111", "津南区": "120112", "北辰区": "120113", "武清区": "120114", "宝坻区": "120115", "滨海新区": "120116", "宁河区": "120117", "静海区": "120118", "蓟州区": "120119", "天津市": "12", "长安区": "610116", "桥西区": "130703", "新华区": "410402", "井陉矿区": "130107", "裕华区": "130108", "藁城区": "130109", "鹿泉区": "130110", "栾城区": "130111", "井陉县": "130121", "正定县": "130123", "行唐县": "130125", "灵寿县": "130126", "高邑县": "130127", "深泽县": "130128", "赞皇县": "130129", "无极县": "130130", "平山县": "130131", "元氏县": "130132", "赵县": "130133", "石家庄高新技术产业开发区": "130171", "石家庄循环化工园区": "130172", "辛集市": "130181", "晋州市": "130183", "新乐市": "130184", "石家庄市": "1301", "路南区": "130202", "路北区": "130203", "古冶区": "130204", "开平区": "130205", "丰南区": "130207", "丰润区": "130208", "曹妃甸区": "130209", "滦南县": "130224", "乐亭县": "130225", "迁西县": "130227", "玉田县": "130229", "河北唐山芦台经济开发区": "130271", "唐山市汉沽管理区": "130272", "唐山高新技术产业开发区": "130273", "河北唐山海港经济开发区": "130274", "遵化市": "130281", "迁安市": "130283", "滦州市": "130284", "唐山市": "1302", "海港区": "130302", "山海关区": "130303", "北戴河区": "130304", "抚宁区": "130306", "青龙满族自治县": "130321", "昌黎县": "130322", "卢龙县": "130324", "秦皇岛市经济技术开发区": "130371", "北戴河新区": "130372", "秦皇岛市": "1303", "邯山区": "130402", "丛台区": "130403", "复兴区": "130404", "峰峰矿区": "130406", "肥乡区": "130407", "永年区": "130408", "临漳县": "130423", "成安县": "130424", "大名县": "130425", "涉县": "130426", "磁县": "130427", "邱县": "130430", "鸡泽县": "130431", "广平县": "130432", "馆陶县": "130433", "魏县": "130434", "曲周县": "130435", "邯郸经济技术开发区": "130471", "邯郸冀南新区": "130473", "武安市": "130481", "邯郸市": "1304", "桥东区": "130702", "邢台县": "130521", "临城县": "130522", "内丘县": "130523", "柏乡县": "130524", "隆尧县": "130525", "任县": "130526", "南和县": "130527", "宁晋县": "130528", "巨鹿县": "130529", "新河县": "130530", "广宗县": "130531", "平乡县": "130532", "威县": "130533", "清河县": "130534", "临西县": "130535", "河北邢台经济开发区": "130571", "南宫市": "130581", "沙河市": "130582", "邢台市": "1305", "竞秀区": "130602", "莲池区": "130606", "满城区": "130607", "清苑区": "130608", "徐水区": "130609", "涞水县": "130623", "阜平县": "130624", "定兴县": "130626", "唐县": "130627", "高阳县": "130628", "容城县": "130629", "涞源县": "130630", "望都县": "130631", "安新县": "130632", "易县": "130633", "曲阳县": "130634", "蠡县": "130635", "顺平县": "130636", "博野县": "130637", "雄县": "130638", "保定高新技术产业开发区": "130671", "保定白沟新城": "130672", "涿州市": "130681", "定州市": "130682", "安国市": "130683", "高碑店市": "130684", "保定市": "1306", "宣化区": "130705", "下花园区": "130706", "万全区": "130708", "崇礼区": "130709", "张北县": "130722", "康保县": "130723", "沽源县": "130724", "尚义县": "130725", "蔚县": "130726", "阳原县": "130727", "怀安县": "130728", "怀来县": "130730", "涿鹿县": "130731", "赤城县": "130732", "张家口经济开发区": "130771", "张家口市察北管理区": "130772", "张家口市塞北管理区": "130773", "张家口市": "1307", "双桥区": "130802", "双滦区": "130803", "鹰手营子矿区": "130804", "承德县": "130821", "兴隆县": "130822", "滦平县": "130824", "隆化县": "130825", "丰宁满族自治县": "130826", "宽城满族自治县": "130827", "围场满族蒙古族自治县": "130828", "承德高新技术产业开发区": "130871", "平泉市": "130881", "承德市": "1308", "运河区": "130903", "沧县": "130921", "青县": "130922", "东光县": "130923", "海兴县": "130924", "盐山县": "130925", "肃宁县": "130926", "南皮县": "130927", "吴桥县": "130928", "献县": "130929", "孟村回族自治县": "130930", "河北沧州经济开发区": "130971", "沧州高新技术产业开发区": "130972", "沧州渤海新区": "130973", "泊头市": "130981", "任丘市": "130982", "黄骅市": "130983", "河间市": "130984", "沧州市": "1309", "安次区": "131002", "广阳区": "131003", "固安县": "131022", "永清县": "131023", "香河县": "131024", "大城县": "131025", "文安县": "131026", "大厂回族自治县": "131028", "廊坊经济技术开发区": "131071", "霸州市": "131081", "三河市": "131082", "廊坊市": "1310", "桃城区": "131102", "冀州区": "131103", "枣强县": "131121", "武邑县": "131122", "武强县": "131123", "饶阳县": "131124", "安平县": "131125", "故城县": "131126", "景县": "131127", "阜城县": "131128", "河北衡水高新技术产业开发区": "131171", "衡水滨湖新区": "131172", "深州市": "131182", "衡水市": "1311", "河北省": "13", "小店区": "140105", "迎泽区": "140106", "杏花岭区": "140107", "尖草坪区": "140108", "万柏林区": "140109", "晋源区": "140110", "清徐县": "140121", "阳曲县": "140122", "娄烦县": "140123", "山西转型综合改革示范区": "140171", "古交市": "140181", "太原市": "1401", "新荣区": "140212", "平城区": "140213", "云冈区": "140214", "云州区": "140215", "阳高县": "140221", "天镇县": "140222", "广灵县": "140223", "灵丘县": "140224", "浑源县": "140225", "左云县": "140226", "山西大同经济开发区": "140271", "大同市": "1402", "城区": "441502", "矿区": "140303", "郊区": "340711", "平定县": "140321", "盂县": "140322", "阳泉市": "1403", "潞州区": "140403", "上党区": "140404", "屯留区": "140405", "潞城区": "140406", "襄垣县": "140423", "平顺县": "140425", "黎城县": "140426", "壶关县": "140427", "长子县": "140428", "武乡县": "140429", "沁县": "140430", "沁源县": "140431", "山西长治高新技术产业园区": "140471", "长治市": "1404", "沁水县": "140521", "阳城县": "140522", "陵川县": "140524", "泽州县": "140525", "高平市": "140581", "晋城市": "1405", "朔城区": "140602", "平鲁区": "140603", "山阴县": "140621", "应县": "140622", "右玉县": "140623", "山西朔州经济开发区": "140671", "怀仁市": "140681", "朔州市": "1406", "榆次区": "140702", "榆社县": "140721", "左权县": "140722", "和顺县": "140723", "昔阳县": "140724", "寿阳县": "140725", "太谷县": "140726", "祁县": "140727", "平遥县": "140728", "灵石县": "140729", "介休市": "140781", "晋中市": "1407", "盐湖区": "140802", "临猗县": "140821", "万荣县": "140822", "闻喜县": "140823", "稷山县": "140824", "新绛县": "140825", "绛县": "140826", "垣曲县": "140827", "夏县": "140828", "平陆县": "140829", "芮城县": "140830", "永济市": "140881", "河津市": "140882", "运城市": "1408", "忻府区": "140902", "定襄县": "140921", "五台县": "140922", "代县": "140923", "繁峙县": "140924", "宁武县": "140925", "静乐县": "140926", "神池县": "140927", "五寨县": "140928", "岢岚县": "140929", "河曲县": "140930", "保德县": "140931", "偏关县": "140932", "五台山风景名胜区": "140971", "原平市": "140981", "忻州市": "1409", "尧都区": "141002", "曲沃县": "141021", "翼城县": "141022", "襄汾县": "141023", "洪洞县": "141024", "古县": "141025", "安泽县": "141026", "浮山县": "141027", "吉县": "141028", "乡宁县": "141029", "大宁县": "141030", "隰县": "141031", "永和县": "141032", "蒲县": "141033", "汾西县": "141034", "侯马市": "141081", "霍州市": "141082", "临汾市": "1410", "离石区": "141102", "文水县": "141121", "交城县": "141122", "兴县": "141123", "临县": "141124", "柳林县": "141125", "石楼县": "141126", "岚县": "141127", "方山县": "141128", "中阳县": "141129", "交口县": "141130", "孝义市": "141181", "汾阳市": "141182", "吕梁市": "1411", "山西省": "14", "新城区": "610102", "回民区": "150103", "玉泉区": "150104", "赛罕区": "150105", "土默特左旗": "150121", "托克托县": "150122", "和林格尔县": "150123", "清水河县": "150124", "武川县": "150125", "呼和浩特金海工业园区": "150171", "呼和浩特经济技术开发区": "150172", "呼和浩特市": "1501", "东河区": "150202", "昆都仑区": "150203", "青山区": "420107", "石拐区": "150205", "白云鄂博矿区": "150206", "九原区": "150207", "土默特右旗": "150221", "固阳县": "150222", "达尔罕茂明安联合旗": "150223", "包头稀土高新技术产业开发区": "150271", "包头市": "1502", "海勃湾区": "150302", "海南区": "150303", "乌达区": "150304", "乌海市": "1503", "红山区": "150402", "元宝山区": "150403", "松山区": "150404", "阿鲁科尔沁旗": "150421", "巴林左旗": "150422", "巴林右旗": "150423", "林西县": "150424", "克什克腾旗": "150425", "翁牛特旗": "150426", "喀喇沁旗": "150428", "宁城县": "150429", "敖汉旗": "150430", "赤峰市": "1504", "科尔沁区": "150502", "科尔沁左翼中旗": "150521", "科尔沁左翼后旗": "150522", "开鲁县": "150523", "库伦旗": "150524", "奈曼旗": "150525", "扎鲁特旗": "150526", "通辽经济技术开发区": "150571", "霍林郭勒市": "150581", "通辽市": "1505", "东胜区": "150602", "康巴什区": "150603", "达拉特旗": "150621", "准格尔旗": "150622", "鄂托克前旗": "150623", "鄂托克旗": "150624", "杭锦旗": "150625", "乌审旗": "150626", "伊金霍洛旗": "150627", "鄂尔多斯市": "1506", "海拉尔区": "150702", "扎赉诺尔区": "150703", "阿荣旗": "150721", "莫力达瓦达斡尔族自治旗": "150722", "鄂伦春自治旗": "150723", "鄂温克族自治旗": "150724", "陈巴尔虎旗": "150725", "新巴尔虎左旗": "150726", "新巴尔虎右旗": "150727", "满洲里市": "150781", "牙克石市": "150782", "扎兰屯市": "150783", "额尔古纳市": "150784", "根河市": "150785", "呼伦贝尔市": "1507", "临河区": "150802", "五原县": "150821", "磴口县": "150822", "乌拉特前旗": "150823", "乌拉特中旗": "150824", "乌拉特后旗": "150825", "杭锦后旗": "150826", "巴彦淖尔市": "1508", "集宁区": "150902", "卓资县": "150921", "化德县": "150922", "商都县": "150923", "兴和县": "150924", "凉城县": "150925", "察哈尔右翼前旗": "150926", "察哈尔右翼中旗": "150927", "察哈尔右翼后旗": "150928", "四子王旗": "150929", "丰镇市": "150981", "乌兰察布市": "1509", "乌兰浩特市": "152201", "阿尔山市": "152202", "科尔沁右翼前旗": "152221", "科尔沁右翼中旗": "152222", "扎赉特旗": "152223", "突泉县": "152224", "兴安盟": "1522", "二连浩特市": "152501", "锡林浩特市": "152502", "阿巴嘎旗": "152522", "苏尼特左旗": "152523", "苏尼特右旗": "152524", "东乌珠穆沁旗": "152525", "西乌珠穆沁旗": "152526", "太仆寺旗": "152527", "镶黄旗": "152528", "正镶白旗": "152529", "正蓝旗": "152530", "多伦县": "152531", "乌拉盖管委会": "152571", "锡林郭勒盟": "1525", "阿拉善左旗": "152921", "阿拉善右旗": "152922", "额济纳旗": "152923", "内蒙古阿拉善经济开发区": "152971", "阿拉善盟": "1529", "内蒙古自治区": "15", "沈河区": "210103", "大东区": "210104", "皇姑区": "210105", "铁西区": "220302", "苏家屯区": "210111", "浑南区": "210112", "沈北新区": "210113", "于洪区": "210114", "辽中区": "210115", "康平县": "210123", "法库县": "210124", "新民市": "210181", "沈阳市": "2101", "中山区": "210202", "西岗区": "210203", "沙河口区": "210204", "甘井子区": "210211", "旅顺口区": "210212", "金州区": "210213", "普兰店区": "210214", "长海县": "210224", "瓦房店市": "210281", "庄河市": "210283", "大连市": "2102", "铁东区": "220303", "立山区": "210304", "千山区": "210311", "台安县": "210321", "岫岩满族自治县": "210323", "海城市": "210381", "鞍山市": "2103", "新抚区": "210402", "东洲区": "210403", "望花区": "210404", "顺城区": "210411", "抚顺县": "210421", "新宾满族自治县": "210422", "清原满族自治县": "210423", "抚顺市": "2104", "平山区": "210502", "溪湖区": "210503", "明山区": "210504", "南芬区": "210505", "本溪满族自治县": "210521", "桓仁满族自治县": "210522", "本溪市": "2105", "元宝区": "210602", "振兴区": "210603", "振安区": "210604", "宽甸满族自治县": "210624", "东港市": "210681", "凤城市": "210682", "丹东市": "2106", "古塔区": "210702", "凌河区": "210703", "太和区": "210711", "黑山县": "210726", "义县": "210727", "凌海市": "210781", "北镇市": "210782", "锦州市": "2107", "站前区": "210802", "西市区": "210803", "鲅鱼圈区": "210804", "老边区": "210811", "盖州市": "210881", "大石桥市": "210882", "营口市": "2108", "海州区": "320706", "新邱区": "210903", "太平区": "210904", "清河门区": "210905", "细河区": "210911", "阜新蒙古族自治县": "210921", "彰武县": "210922", "阜新市": "2109", "白塔区": "211002", "文圣区": "211003", "宏伟区": "211004", "弓长岭区": "211005", "太子河区": "211011", "辽阳县": "211021", "灯塔市": "211081", "辽阳市": "2110", "双台子区": "211102", "兴隆台区": "211103", "大洼区": "211104", "盘山县": "211122", "盘锦市": "2111", "银州区": "211202", "清河区": "211204", "铁岭县": "211221", "西丰县": "211223", "昌图县": "211224", "调兵山市": "211281", "开原市": "211282", "铁岭市": "2112", "双塔区": "211302", "龙城区": "211303", "朝阳县": "211321", "建平县": "211322", "喀喇沁左翼蒙古族自治县": "211324", "北票市": "211381", "凌源市": "211382", "朝阳市": "2113", "连山区": "211402", "龙港区": "211403", "南票区": "211404", "绥中县": "211421", "建昌县": "211422", "兴城市": "211481", "葫芦岛市": "2114", "辽宁省": "21", "南关区": "220102", "宽城区": "220103", "二道区": "220105", "绿园区": "220106", "双阳区": "220112", "九台区": "220113", "农安县": "220122", "长春经济技术开发区": "220171", "长春净月高新技术产业开发区": "220172", "长春高新技术产业开发区": "220173", "长春汽车经济技术开发区": "220174", "榆树市": "220182", "德惠市": "220183", "长春市": "2201", "昌邑区": "220202", "龙潭区": "220203", "船营区": "220204", "丰满区": "220211", "永吉县": "220221", "吉林经济开发区": "220271", "吉林高新技术产业开发区": "220272", "吉林中国新加坡食品区": "220273", "蛟河市": "220281", "桦甸市": "220282", "舒兰市": "220283", "磐石市": "220284", "吉林市": "2202", "梨树县": "220322", "伊通满族自治县": "220323", "公主岭市": "220381", "双辽市": "220382", "四平市": "2203", "龙山区": "220402", "西安区": "231005", "东丰县": "220421", "东辽县": "220422", "辽源市": "2204", "东昌区": "220502", "二道江区": "220503", "通化县": "220521", "辉南县": "220523", "柳河县": "220524", "梅河口市": "220581", "集安市": "220582", "通化市": "2205", "浑江区": "220602", "江源区": "220605", "抚松县": "220621", "靖宇县": "220622", "长白朝鲜族自治县": "220623", "临江市": "220681", "白山市": "2206", "宁江区": "220702", "前郭尔罗斯蒙古族自治县": "220721", "长岭县": "220722", "乾安县": "220723", "吉林松原经济开发区": "220771", "扶余市": "220781", "松原市": "2207", "洮北区": "220802", "镇赉县": "220821", "通榆县": "220822", "吉林白城经济开发区": "220871", "洮南市": "220881", "大安市": "220882", "白城市": "2208", "延吉市": "222401", "图们市": "222402", "敦化市": "222403", "珲春市": "222404", "龙井市": "222405", "和龙市": "222406", "汪清县": "222424", "安图县": "222426", "延边朝鲜族自治州": "2224", "吉林省": "22", "道里区": "230102", "南岗区": "230103", "道外区": "230104", "平房区": "230108", "松北区": "230109", "香坊区": "230110", "呼兰区": "230111", "阿城区": "230112", "双城区": "230113", "依兰县": "230123", "方正县": "230124", "宾县": "230125", "巴彦县": "230126", "木兰县": "230127", "通河县": "230128", "延寿县": "230129", "尚志市": "230183", "五常市": "230184", "哈尔滨市": "2301", "龙沙区": "230202", "建华区": "230203", "铁锋区": "230204", "昂昂溪区": "230205", "富拉尔基区": "230206", "碾子山区": "230207", "梅里斯达斡尔族区": "230208", "龙江县": "230221", "依安县": "230223", "泰来县": "230224", "甘南县": "230225", "富裕县": "230227", "克山县": "230229", "克东县": "230230", "拜泉县": "230231", "讷河市": "230281", "齐齐哈尔市": "2302", "鸡冠区": "230302", "恒山区": "230303", "滴道区": "230304", "梨树区": "230305", "城子河区": "230306", "麻山区": "230307", "鸡东县": "230321", "虎林市": "230381", "密山市": "230382", "鸡西市": "2303", "向阳区": "230803", "工农区": "230403", "南山区": "440305", "兴安区": "230405", "东山区": "230406", "兴山区": "230407", "萝北县": "230421", "绥滨县": "230422", "鹤岗市": "2304", "尖山区": "230502", "岭东区": "230503", "四方台区": "230505", "宝山区": "310113", "集贤县": "230521", "友谊县": "230522", "宝清县": "230523", "饶河县": "230524", "双鸭山市": "2305", "萨尔图区": "230602", "龙凤区": "230603", "让胡路区": "230604", "红岗区": "230605", "大同区": "230606", "肇州县": "230621", "肇源县": "230622", "林甸县": "230623", "杜尔伯特蒙古族自治县": "230624", "大庆高新技术产业开发区": "230671", "大庆市": "2306", "伊美区": "230717", "乌翠区": "230718", "友好区": "230719", "嘉荫县": "230722", "汤旺县": "230723", "丰林县": "230724", "大箐山县": "230725", "南岔县": "230726", "金林区": "230751", "铁力市": "230781", "伊春市": "2307", "前进区": "230804", "东风区": "230805", "桦南县": "230822", "桦川县": "230826", "汤原县": "230828", "同江市": "230881", "富锦市": "230882", "抚远市": "230883", "佳木斯市": "2308", "新兴区": "230902", "桃山区": "230903", "茄子河区": "230904", "勃利县": "230921", "七台河市": "2309", "东安区": "231002", "阳明区": "231003", "爱民区": "231004", "林口县": "231025", "牡丹江经济技术开发区": "231071", "绥芬河市": "231081", "海林市": "231083", "宁安市": "231084", "穆棱市": "231085", "东宁市": "231086", "牡丹江市": "2310", "爱辉区": "231102", "逊克县": "231123", "孙吴县": "231124", "北安市": "231181", "五大连池市": "231182", "嫩江市": "231183", "黑河市": "2311", "北林区": "231202", "望奎县": "231221", "兰西县": "231222", "青冈县": "231223", "庆安县": "231224", "明水县": "231225", "绥棱县": "231226", "安达市": "231281", "肇东市": "231282", "海伦市": "231283", "绥化市": "2312", "漠河市": "232701", "呼玛县": "232721", "塔河县": "232722", "加格达奇区": "232761", "松岭区": "232762", "新林区": "232763", "呼中区": "232764", "大兴安岭地区": "2327", "黑龙江省": "23", "黄浦区": "310101", "徐汇区": "310104", "长宁区": "310105", "静安区": "310106", "普陀区": "330903", "虹口区": "310109", "杨浦区": "310110", "闵行区": "310112", "嘉定区": "310114", "浦东新区": "310115", "金山区": "310116", "松江区": "310117", "青浦区": "310118", "奉贤区": "310120", "崇明区": "310151", "上海市": "31", "玄武区": "320102", "秦淮区": "320104", "建邺区": "320105", "鼓楼区": "410204", "浦口区": "320111", "栖霞区": "320113", "雨花台区": "320114", "江宁区": "320115", "六合区": "320116", "溧水区": "320117", "高淳区": "320118", "南京市": "3201", "锡山区": "320205", "惠山区": "320206", "滨湖区": "320211", "梁溪区": "320213", "新吴区": "320214", "江阴市": "320281", "宜兴市": "320282", "无锡市": "3202", "云龙区": "320303", "贾汪区": "320305", "泉山区": "320311", "铜山区": "320312", "丰县": "320321", "沛县": "320322", "睢宁县": "320324", "徐州经济技术开发区": "320371", "新沂市": "320381", "邳州市": "320382", "徐州市": "3203", "天宁区": "320402", "钟楼区": "320404", "新北区": "320411", "武进区": "320412", "金坛区": "320413", "溧阳市": "320481", "常州市": "3204", "虎丘区": "320505", "吴中区": "320506", "相城区": "320507", "姑苏区": "320508", "吴江区": "320509", "苏州工业园区": "320571", "常熟市": "320581", "张家港市": "320582", "昆山市": "320583", "太仓市": "320585", "苏州市": "3205", "崇川区": "320602", "港闸区": "320611", "如东县": "320623", "南通经济技术开发区": "320671", "启东市": "320681", "如皋市": "320682", "海门市": "320684", "海安市": "320685", "南通市": "3206", "连云区": "320703", "赣榆区": "320707", "东海县": "320722", "灌云县": "320723", "灌南县": "320724", "连云港经济技术开发区": "320771", "连云港高新技术产业开发区": "320772", "连云港市": "3207", "淮安区": "320803", "淮阴区": "320804", "清江浦区": "320812", "洪泽区": "320813", "涟水县": "320826", "盱眙县": "320830", "金湖县": "320831", "淮安经济技术开发区": "320871", "淮安市": "3208", "亭湖区": "320902", "盐都区": "320903", "大丰区": "320904", "响水县": "320921", "滨海县": "320922", "阜宁县": "320923", "射阳县": "320924", "建湖县": "320925", "盐城经济技术开发区": "320971", "东台市": "320981", "盐城市": "3209", "广陵区": "321002", "邗江区": "321003", "江都区": "321012", "宝应县": "321023", "扬州经济技术开发区": "321071", "仪征市": "321081", "高邮市": "321084", "扬州市": "3210", "京口区": "321102", "润州区": "321111", "丹徒区": "321112", "镇江新区": "321171", "丹阳市": "321181", "扬中市": "321182", "句容市": "321183", "镇江市": "3211", "海陵区": "321202", "高港区": "321203", "姜堰区": "321204", "泰州医药高新技术产业开发区": "321271", "兴化市": "321281", "靖江市": "321282", "泰兴市": "321283", "泰州市": "3212", "宿城区": "321302", "宿豫区": "321311", "沭阳县": "321322", "泗阳县": "321323", "泗洪县": "321324", "宿迁经济技术开发区": "321371", "宿迁市": "3213", "江苏省": "32", "上城区": "330102", "下城区": "330103", "江干区": "330104", "拱墅区": "330105", "西湖区": "360103", "滨江区": "330108", "萧山区": "330109", "余杭区": "330110", "富阳区": "330111", "临安区": "330112", "桐庐县": "330122", "淳安县": "330127", "建德市": "330182", "杭州市": "3301", "海曙区": "330203", "江北区": "500105", "北仑区": "330206", "镇海区": "330211", "鄞州区": "330212", "奉化区": "330213", "象山县": "330225", "宁海县": "330226", "余姚市": "330281", "慈溪市": "330282", "宁波市": "3302", "鹿城区": "330302", "龙湾区": "330303", "瓯海区": "330304", "洞头区": "330305", "永嘉县": "330324", "平阳县": "330326", "苍南县": "330327", "文成县": "330328", "泰顺县": "330329", "温州经济技术开发区": "330371", "瑞安市": "330381", "乐清市": "330382", "龙港市": "330383", "温州市": "3303", "南湖区": "330402", "秀洲区": "330411", "嘉善县": "330421", "海盐县": "330424", "海宁市": "330481", "平湖市": "330482", "桐乡市": "330483", "嘉兴市": "3304", "吴兴区": "330502", "南浔区": "330503", "德清县": "330521", "长兴县": "330522", "安吉县": "330523", "湖州市": "3305", "越城区": "330602", "柯桥区": "330603", "上虞区": "330604", "新昌县": "330624", "诸暨市": "330681", "嵊州市": "330683", "绍兴市": "3306", "婺城区": "330702", "金东区": "330703", "武义县": "330723", "浦江县": "330726", "磐安县": "330727", "兰溪市": "330781", "义乌市": "330782", "东阳市": "330783", "永康市": "330784", "金华市": "3307", "柯城区": "330802", "衢江区": "330803", "常山县": "330822", "开化县": "330824", "龙游县": "330825", "江山市": "330881", "衢州市": "3308", "定海区": "330902", "岱山县": "330921", "嵊泗县": "330922", "舟山市": "3309", "椒江区": "331002", "黄岩区": "331003", "路桥区": "331004", "三门县": "331022", "天台县": "331023", "仙居县": "331024", "温岭市": "331081", "临海市": "331082", "玉环市": "331083", "台州市": "3310", "莲都区": "331102", "青田县": "331121", "缙云县": "331122", "遂昌县": "331123", "松阳县": "331124", "云和县": "331125", "庆元县": "331126", "景宁畲族自治县": "331127", "龙泉市": "331181", "丽水市": "3311", "浙江省": "33", "瑶海区": "340102", "庐阳区": "340103", "蜀山区": "340104", "包河区": "340111", "长丰县": "340121", "肥东县": "340122", "肥西县": "340123", "庐江县": "340124", "合肥高新技术产业开发区": "340171", "合肥经济技术开发区": "340172", "合肥新站高新技术产业开发区": "340173", "巢湖市": "340181", "合肥市": "3401", "镜湖区": "340202", "弋江区": "340203", "鸠江区": "340207", "三山区": "340208", "芜湖县": "340221", "繁昌县": "340222", "南陵县": "340223", "无为县": "340225", "芜湖经济技术开发区": "340271", "安徽芜湖长江大桥经济开发区": "340272", "芜湖市": "3402", "龙子湖区": "340302", "蚌山区": "340303", "禹会区": "340304", "淮上区": "340311", "怀远县": "340321", "五河县": "340322", "固镇县": "340323", "蚌埠市高新技术开发区": "340371", "蚌埠市经济开发区": "340372", "蚌埠市": "3403", "大通区": "340402", "田家庵区": "340403", "谢家集区": "340404", "八公山区": "340405", "潘集区": "340406", "凤台县": "340421", "寿县": "340422", "淮南市": "3404", "花山区": "340503", "雨山区": "340504", "博望区": "340506", "当涂县": "340521", "含山县": "340522", "和县": "340523", "马鞍山市": "3405", "杜集区": "340602", "相山区": "340603", "烈山区": "340604", "濉溪县": "340621", "淮北市": "3406", "铜官区": "340705", "义安区": "340706", "枞阳县": "340722", "铜陵市": "3407", "迎江区": "340802", "大观区": "340803", "宜秀区": "340811", "怀宁县": "340822", "太湖县": "340825", "宿松县": "340826", "望江县": "340827", "岳西县": "340828", "安徽安庆经济开发区": "340871", "桐城市": "340881", "潜山市": "340882", "安庆市": "3408", "屯溪区": "341002", "黄山区": "341003", "徽州区": "341004", "歙县": "341021", "休宁县": "341022", "黟县": "341023", "祁门县": "341024", "黄山市": "3410", "琅琊区": "341102", "南谯区": "341103", "来安县": "341122", "全椒县": "341124", "定远县": "341125", "凤阳县": "341126", "苏滁现代产业园": "341171", "滁州经济技术开发区": "341172", "天长市": "341181", "明光市": "341182", "滁州市": "3411", "颍州区": "341202", "颍东区": "341203", "颍泉区": "341204", "临泉县": "341221", "太和县": "341222", "阜南县": "341225", "颍上县": "341226", "阜阳合肥现代产业园区": "341271", "阜阳经济技术开发区": "341272", "界首市": "341282", "阜阳市": "3412", "埇桥区": "341302", "砀山县": "341321", "萧县": "341322", "灵璧县": "341323", "泗县": "341324", "宿州马鞍山现代产业园区": "341371", "宿州经济技术开发区": "341372", "宿州市": "3413", "金安区": "341502", "裕安区": "341503", "叶集区": "341504", "霍邱县": "341522", "舒城县": "341523", "金寨县": "341524", "霍山县": "341525", "六安市": "3415", "谯城区": "341602", "涡阳县": "341621", "蒙城县": "341622", "利辛县": "341623", "亳州市": "3416", "贵池区": "341702", "东至县": "341721", "石台县": "341722", "青阳县": "341723", "池州市": "3417", "宣州区": "341802", "郎溪县": "341821", "泾县": "341823", "绩溪县": "341824", "旌德县": "341825", "宣城市经济开发区": "341871", "宁国市": "341881", "广德市": "341882", "宣城市": "3418", "安徽省": "34", "台江区": "350103", "仓山区": "350104", "马尾区": "350105", "晋安区": "350111", "长乐区": "350112", "闽侯县": "350121", "连江县": "350122", "罗源县": "350123", "闽清县": "350124", "永泰县": "350125", "平潭县": "350128", "福清市": "350181", "福州市": "3501", "思明区": "350203", "海沧区": "350205", "湖里区": "350206", "集美区": "350211", "同安区": "350212", "翔安区": "350213", "厦门市": "3502", "城厢区": "350302", "涵江区": "350303", "荔城区": "350304", "秀屿区": "350305", "仙游县": "350322", "莆田市": "3503", "梅列区": "350402", "三元区": "350403", "明溪县": "350421", "清流县": "350423", "宁化县": "350424", "大田县": "350425", "尤溪县": "350426", "沙县": "350427", "将乐县": "350428", "泰宁县": "350429", "建宁县": "350430", "永安市": "350481", "三明市": "3504", "鲤城区": "350502", "丰泽区": "350503", "洛江区": "350504", "泉港区": "350505", "惠安县": "350521", "安溪县": "350524", "永春县": "350525", "德化县": "350526", "金门县": "350527", "石狮市": "350581", "晋江市": "350582", "南安市": "350583", "泉州市": "3505", "芗城区": "350602", "龙文区": "350603", "云霄县": "350622", "漳浦县": "350623", "诏安县": "350624", "长泰县": "350625", "东山县": "350626", "南靖县": "350627", "平和县": "350628", "华安县": "350629", "龙海市": "350681", "漳州市": "3506", "延平区": "350702", "建阳区": "350703", "顺昌县": "350721", "浦城县": "350722", "光泽县": "350723", "松溪县": "350724", "政和县": "350725", "邵武市": "350781", "武夷山市": "350782", "建瓯市": "350783", "南平市": "3507", "新罗区": "350802", "永定区": "430802", "长汀县": "350821", "上杭县": "350823", "武平县": "350824", "连城县": "350825", "漳平市": "350881", "龙岩市": "3508", "蕉城区": "350902", "霞浦县": "350921", "古田县": "350922", "屏南县": "350923", "寿宁县": "350924", "周宁县": "350925", "柘荣县": "350926", "福安市": "350981", "福鼎市": "350982", "宁德市": "3509", "福建省": "35", "东湖区": "360102", "青云谱区": "360104", "湾里区": "360105", "青山湖区": "360111", "新建区": "360112", "南昌县": "360121", "安义县": "360123", "进贤县": "360124", "南昌市": "3601", "昌江区": "360202", "珠山区": "360203", "浮梁县": "360222", "乐平市": "360281", "景德镇市": "3602", "安源区": "360302", "湘东区": "360313", "莲花县": "360321", "上栗县": "360322", "芦溪县": "360323", "萍乡市": "3603", "濂溪区": "360402", "浔阳区": "360403", "柴桑区": "360404", "武宁县": "360423", "修水县": "360424", "永修县": "360425", "德安县": "360426", "都昌县": "360428", "湖口县": "360429", "彭泽县": "360430", "瑞昌市": "360481", "共青城市": "360482", "庐山市": "360483", "九江市": "3604", "渝水区": "360502", "分宜县": "360521", "新余市": "3605", "月湖区": "360602", "余江区": "360603", "贵溪市": "360681", "鹰潭市": "3606", "章贡区": "360702", "南康区": "360703", "赣县区": "360704", "信丰县": "360722", "大余县": "360723", "上犹县": "360724", "崇义县": "360725", "安远县": "360726", "龙南县": "360727", "定南县": "360728", "全南县": "360729", "宁都县": "360730", "于都县": "360731", "兴国县": "360732", "会昌县": "360733", "寻乌县": "360734", "石城县": "360735", "瑞金市": "360781", "赣州市": "3607", "吉州区": "360802", "青原区": "360803", "吉安县": "360821", "吉水县": "360822", "峡江县": "360823", "新干县": "360824", "永丰县": "360825", "泰和县": "360826", "遂川县": "360827", "万安县": "360828", "安福县": "360829", "永新县": "360830", "井冈山市": "360881", "吉安市": "3608", "袁州区": "360902", "奉新县": "360921", "万载县": "360922", "上高县": "360923", "宜丰县": "360924", "靖安县": "360925", "铜鼓县": "360926", "丰城市": "360981", "樟树市": "360982", "高安市": "360983", "宜春市": "3609", "临川区": "361002", "东乡区": "361003", "南城县": "361021", "黎川县": "361022", "南丰县": "361023", "崇仁县": "361024", "乐安县": "361025", "宜黄县": "361026", "金溪县": "361027", "资溪县": "361028", "广昌县": "361030", "抚州市": "3610", "信州区": "361102", "广丰区": "361103", "广信区": "361104", "玉山县": "361123", "铅山县": "361124", "横峰县": "361125", "弋阳县": "361126", "余干县": "361127", "鄱阳县": "361128", "万年县": "361129", "婺源县": "361130", "德兴市": "361181", "上饶市": "3611", "江西省": "36", "历下区": "370102", "市中区": "511102", "槐荫区": "370104", "天桥区": "370105", "历城区": "370112", "长清区": "370113", "章丘区": "370114", "济阳区": "370115", "莱芜区": "370116", "钢城区": "370117", "平阴县": "370124", "商河县": "370126", "济南高新技术产业开发区": "370171", "济南市": "3701", "市南区": "370202", "市北区": "370203", "黄岛区": "370211", "崂山区": "370212", "李沧区": "370213", "城阳区": "370214", "即墨区": "370215", "青岛高新技术产业开发区": "370271", "胶州市": "370281", "平度市": "370283", "莱西市": "370285", "青岛市": "3702", "淄川区": "370302", "张店区": "370303", "博山区": "370304", "临淄区": "370305", "周村区": "370306", "桓台县": "370321", "高青县": "370322", "沂源县": "370323", "淄博市": "3703", "薛城区": "370403", "峄城区": "370404", "台儿庄区": "370405", "山亭区": "370406", "滕州市": "370481", "枣庄市": "3704", "东营区": "370502", "河口区": "370503", "垦利区": "370505", "利津县": "370522", "广饶县": "370523", "东营经济技术开发区": "370571", "东营港经济开发区": "370572", "东营市": "3705", "芝罘区": "370602", "福山区": "370611", "牟平区": "370612", "莱山区": "370613", "长岛县": "370634", "烟台高新技术产业开发区": "370671", "烟台经济技术开发区": "370672", "龙口市": "370681", "莱阳市": "370682", "莱州市": "370683", "蓬莱市": "370684", "招远市": "370685", "栖霞市": "370686", "海阳市": "370687", "烟台市": "3706", "潍城区": "370702", "寒亭区": "370703", "坊子区": "370704", "奎文区": "370705", "临朐县": "370724", "昌乐县": "370725", "潍坊滨海经济技术开发区": "370772", "青州市": "370781", "诸城市": "370782", "寿光市": "370783", "安丘市": "370784", "高密市": "370785", "昌邑市": "370786", "潍坊市": "3707", "任城区": "370811", "兖州区": "370812", "微山县": "370826", "鱼台县": "370827", "金乡县": "370828", "嘉祥县": "370829", "汶上县": "370830", "泗水县": "370831", "梁山县": "370832", "济宁高新技术产业开发区": "370871", "曲阜市": "370881", "邹城市": "370883", "济宁市": "3708", "泰山区": "370902", "岱岳区": "370911", "宁阳县": "370921", "东平县": "370923", "新泰市": "370982", "肥城市": "370983", "泰安市": "3709", "环翠区": "371002", "文登区": "371003", "威海火炬高技术产业开发区": "371071", "威海经济技术开发区": "371072", "威海临港经济技术开发区": "371073", "荣成市": "371082", "乳山市": "371083", "威海市": "3710", "东港区": "371102", "岚山区": "371103", "五莲县": "371121", "莒县": "371122", "日照经济技术开发区": "371171", "日照市": "3711", "兰山区": "371302", "罗庄区": "371311", "沂南县": "371321", "郯城县": "371322", "沂水县": "371323", "兰陵县": "371324", "费县": "371325", "平邑县": "371326", "莒南县": "371327", "蒙阴县": "371328", "临沭县": "371329", "临沂高新技术产业开发区": "371371", "临沂经济技术开发区": "371372", "临沂临港经济开发区": "371373", "临沂市": "3713", "德城区": "371402", "陵城区": "371403", "宁津县": "371422", "庆云县": "371423", "临邑县": "371424", "齐河县": "371425", "平原县": "371426", "夏津县": "371427", "武城县": "371428", "德州经济技术开发区": "371471", "德州运河经济开发区": "371472", "乐陵市": "371481", "禹城市": "371482", "德州市": "3714", "东昌府区": "371502", "茌平区": "371503", "阳谷县": "371521", "莘县": "371522", "东阿县": "371524", "冠县": "371525", "高唐县": "371526", "临清市": "371581", "聊城市": "3715", "滨城区": "371602", "沾化区": "371603", "惠民县": "371621", "阳信县": "371622", "无棣县": "371623", "博兴县": "371625", "邹平市": "371681", "滨州市": "3716", "牡丹区": "371702", "定陶区": "371703", "曹县": "371721", "单县": "371722", "成武县": "371723", "巨野县": "371724", "郓城县": "371725", "鄄城县": "371726", "东明县": "371728", "菏泽经济技术开发区": "371771", "菏泽高新技术开发区": "371772", "菏泽市": "3717", "山东省": "37", "中原区": "410102", "二七区": "410103", "管城回族区": "410104", "金水区": "410105", "上街区": "410106", "惠济区": "410108", "中牟县": "410122", "郑州经济技术开发区": "410171", "郑州高新技术产业开发区": "410172", "郑州航空港经济综合实验区": "410173", "巩义市": "410181", "荥阳市": "410182", "新密市": "410183", "新郑市": "410184", "登封市": "410185", "郑州市": "4101", "龙亭区": "410202", "顺河回族区": "410203", "禹王台区": "410205", "祥符区": "410212", "杞县": "410221", "通许县": "410222", "尉氏县": "410223", "兰考县": "410225", "开封市": "4102", "老城区": "410302", "西工区": "410303", "瀍河回族区": "410304", "涧西区": "410305", "吉利区": "410306", "洛龙区": "410311", "孟津县": "410322", "新安县": "410323", "栾川县": "410324", "嵩县": "410325", "汝阳县": "410326", "宜阳县": "410327", "洛宁县": "410328", "伊川县": "410329", "洛阳高新技术产业开发区": "410371", "偃师市": "410381", "洛阳市": "4103", "卫东区": "410403", "石龙区": "410404", "湛河区": "410411", "宝丰县": "410421", "叶县": "410422", "鲁山县": "410423", "郏县": "410425", "平顶山高新技术产业开发区": "410471", "平顶山市城乡一体化示范区": "410472", "舞钢市": "410481", "汝州市": "410482", "平顶山市": "4104", "文峰区": "410502", "北关区": "410503", "殷都区": "410505", "龙安区": "410506", "安阳县": "410522", "汤阴县": "410523", "滑县": "410526", "内黄县": "410527", "安阳高新技术产业开发区": "410571", "林州市": "410581", "安阳市": "4105", "鹤山区": "410602", "山城区": "410603", "淇滨区": "410611", "浚县": "410621", "淇县": "410622", "鹤壁经济技术开发区": "410671", "鹤壁市": "4106", "红旗区": "410702", "卫滨区": "410703", "凤泉区": "410704", "牧野区": "410711", "新乡县": "410721", "获嘉县": "410724", "原阳县": "410725", "延津县": "410726", "封丘县": "410727", "新乡高新技术产业开发区": "410771", "新乡经济技术开发区": "410772", "新乡市平原城乡一体化示范区": "410773", "卫辉市": "410781", "辉县市": "410782", "长垣市": "410783", "新乡市": "4107", "解放区": "410802", "中站区": "410803", "马村区": "410804", "山阳区": "410811", "修武县": "410821", "博爱县": "410822", "武陟县": "410823", "温县": "410825", "焦作城乡一体化示范区": "410871", "沁阳市": "410882", "孟州市": "410883", "焦作市": "4108", "华龙区": "410902", "清丰县": "410922", "南乐县": "410923", "范县": "410926", "台前县": "410927", "濮阳县": "410928", "河南濮阳工业园区": "410971", "濮阳经济技术开发区": "410972", "濮阳市": "4109", "魏都区": "411002", "建安区": "411003", "鄢陵县": "411024", "襄城县": "411025", "许昌经济技术开发区": "411071", "禹州市": "411081", "长葛市": "411082", "许昌市": "4110", "源汇区": "411102", "郾城区": "411103", "召陵区": "411104", "舞阳县": "411121", "临颍县": "411122", "漯河经济技术开发区": "411171", "漯河市": "4111", "湖滨区": "411202", "陕州区": "411203", "渑池县": "411221", "卢氏县": "411224", "河南三门峡经济开发区": "411271", "义马市": "411281", "灵宝市": "411282", "三门峡市": "4112", "宛城区": "411302", "卧龙区": "411303", "南召县": "411321", "方城县": "411322", "西峡县": "411323", "镇平县": "411324", "内乡县": "411325", "淅川县": "411326", "社旗县": "411327", "唐河县": "411328", "新野县": "411329", "桐柏县": "411330", "南阳高新技术产业开发区": "411371", "南阳市城乡一体化示范区": "411372", "邓州市": "411381", "南阳市": "4113", "梁园区": "411402", "睢阳区": "411403", "民权县": "411421", "睢县": "411422", "宁陵县": "411423", "柘城县": "411424", "虞城县": "411425", "夏邑县": "411426", "豫东综合物流产业聚集区": "411471", "河南商丘经济开发区": "411472", "永城市": "411481", "商丘市": "4114", "浉河区": "411502", "平桥区": "411503", "罗山县": "411521", "光山县": "411522", "新县": "411523", "商城县": "411524", "固始县": "411525", "潢川县": "411526", "淮滨县": "411527", "息县": "411528", "信阳高新技术产业开发区": "411571", "信阳市": "4115", "川汇区": "411602", "淮阳区": "411603", "扶沟县": "411621", "西华县": "411622", "商水县": "411623", "沈丘县": "411624", "郸城县": "411625", "太康县": "411627", "鹿邑县": "411628", "河南周口经济开发区": "411671", "项城市": "411681", "周口市": "4116", "驿城区": "411702", "西平县": "411721", "上蔡县": "411722", "平舆县": "411723", "正阳县": "411724", "确山县": "411725", "泌阳县": "411726", "汝南县": "411727", "遂平县": "411728", "新蔡县": "411729", "河南驻马店经济开发区": "411771", "驻马店市": "4117", "济源市": "419001", "省直辖县级行政区划": "4690", "河南省": "41", "江岸区": "420102", "江汉区": "420103", "硚口区": "420104", "汉阳区": "420105", "武昌区": "420106", "洪山区": "420111", "东西湖区": "420112", "汉南区": "420113", "蔡甸区": "420114", "江夏区": "420115", "黄陂区": "420116", "新洲区": "420117", "武汉市": "4201", "黄石港区": "420202", "西塞山区": "420203", "下陆区": "420204", "铁山区": "420205", "阳新县": "420222", "大冶市": "420281", "黄石市": "4202", "茅箭区": "420302", "张湾区": "420303", "郧阳区": "420304", "郧西县": "420322", "竹山县": "420323", "竹溪县": "420324", "房县": "420325", "丹江口市": "420381", "十堰市": "4203", "西陵区": "420502", "伍家岗区": "420503", "点军区": "420504", "猇亭区": "420505", "夷陵区": "420506", "远安县": "420525", "兴山县": "420526", "秭归县": "420527", "长阳土家族自治县": "420528", "五峰土家族自治县": "420529", "宜都市": "420581", "当阳市": "420582", "枝江市": "420583", "宜昌市": "4205", "襄城区": "420602", "樊城区": "420606", "襄州区": "420607", "南漳县": "420624", "谷城县": "420625", "保康县": "420626", "老河口市": "420682", "枣阳市": "420683", "宜城市": "420684", "襄阳市": "4206", "梁子湖区": "420702", "华容区": "420703", "鄂城区": "420704", "鄂州市": "4207", "东宝区": "420802", "掇刀区": "420804", "沙洋县": "420822", "钟祥市": "420881", "京山市": "420882", "荆门市": "4208", "孝南区": "420902", "孝昌县": "420921", "大悟县": "420922", "云梦县": "420923", "应城市": "420981", "安陆市": "420982", "汉川市": "420984", "孝感市": "4209", "沙市区": "421002", "荆州区": "421003", "公安县": "421022", "监利县": "421023", "江陵县": "421024", "荆州经济技术开发区": "421071", "石首市": "421081", "洪湖市": "421083", "松滋市": "421087", "荆州市": "4210", "黄州区": "421102", "团风县": "421121", "红安县": "421122", "罗田县": "421123", "英山县": "421124", "浠水县": "421125", "蕲春县": "421126", "黄梅县": "421127", "龙感湖管理区": "421171", "麻城市": "421181", "武穴市": "421182", "黄冈市": "4211", "咸安区": "421202", "嘉鱼县": "421221", "通城县": "421222", "崇阳县": "421223", "通山县": "421224", "赤壁市": "421281", "咸宁市": "4212", "曾都区": "421303", "随县": "421321", "广水市": "421381", "随州市": "4213", "恩施市": "422801", "利川市": "422802", "建始县": "422822", "巴东县": "422823", "宣恩县": "422825", "咸丰县": "422826", "来凤县": "422827", "鹤峰县": "422828", "恩施土家族苗族自治州": "4228", "仙桃市": "429004", "潜江市": "429005", "天门市": "429006", "神农架林区": "429021", "湖北省": "42", "芙蓉区": "430102", "天心区": "430103", "岳麓区": "430104", "开福区": "430105", "雨花区": "430111", "望城区": "430112", "长沙县": "430121", "浏阳市": "430181", "宁乡市": "430182", "长沙市": "4301", "荷塘区": "430202", "芦淞区": "430203", "石峰区": "430204", "天元区": "430211", "渌口区": "430212", "攸县": "430223", "茶陵县": "430224", "炎陵县": "430225", "云龙示范区": "430271", "醴陵市": "430281", "株洲市": "4302", "雨湖区": "430302", "岳塘区": "430304", "湘潭县": "430321", "湖南湘潭高新技术产业园区": "430371", "湘潭昭山示范区": "430372", "湘潭九华示范区": "430373", "湘乡市": "430381", "韶山市": "430382", "湘潭市": "4303", "珠晖区": "430405", "雁峰区": "430406", "石鼓区": "430407", "蒸湘区": "430408", "南岳区": "430412", "衡阳县": "430421", "衡南县": "430422", "衡山县": "430423", "衡东县": "430424", "祁东县": "430426", "衡阳综合保税区": "430471", "湖南衡阳高新技术产业园区": "430472", "湖南衡阳松木经济开发区": "430473", "耒阳市": "430481", "常宁市": "430482", "衡阳市": "4304", "双清区": "430502", "大祥区": "430503", "北塔区": "430511", "新邵县": "430522", "邵阳县": "430523", "隆回县": "430524", "洞口县": "430525", "绥宁县": "430527", "新宁县": "430528", "城步苗族自治县": "430529", "武冈市": "430581", "邵东市": "430582", "邵阳市": "4305", "岳阳楼区": "430602", "云溪区": "430603", "君山区": "430611", "岳阳县": "430621", "华容县": "430623", "湘阴县": "430624", "平江县": "430626", "岳阳市屈原管理区": "430671", "汨罗市": "430681", "临湘市": "430682", "岳阳市": "4306", "武陵区": "430702", "鼎城区": "430703", "安乡县": "430721", "汉寿县": "430722", "澧县": "430723", "临澧县": "430724", "桃源县": "430725", "石门县": "430726", "常德市西洞庭管理区": "430771", "津市市": "430781", "常德市": "4307", "武陵源区": "430811", "慈利县": "430821", "桑植县": "430822", "张家界市": "4308", "资阳区": "430902", "赫山区": "430903", "南县": "430921", "桃江县": "430922", "安化县": "430923", "益阳市大通湖管理区": "430971", "湖南益阳高新技术产业园区": "430972", "沅江市": "430981", "益阳市": "4309", "北湖区": "431002", "苏仙区": "431003", "桂阳县": "431021", "宜章县": "431022", "永兴县": "431023", "嘉禾县": "431024", "临武县": "431025", "汝城县": "431026", "桂东县": "431027", "安仁县": "431028", "资兴市": "431081", "郴州市": "4310", "零陵区": "431102", "冷水滩区": "431103", "祁阳县": "431121", "东安县": "431122", "双牌县": "431123", "道县": "431124", "江永县": "431125", "宁远县": "431126", "蓝山县": "431127", "新田县": "431128", "江华瑶族自治县": "431129", "永州经济技术开发区": "431171", "永州市金洞管理区": "431172", "永州市回龙圩管理区": "431173", "永州市": "4311", "鹤城区": "431202", "中方县": "431221", "沅陵县": "431222", "辰溪县": "431223", "溆浦县": "431224", "会同县": "431225", "麻阳苗族自治县": "431226", "新晃侗族自治县": "431227", "芷江侗族自治县": "431228", "靖州苗族侗族自治县": "431229", "通道侗族自治县": "431230", "怀化市洪江管理区": "431271", "洪江市": "431281", "怀化市": "4312", "娄星区": "431302", "双峰县": "431321", "新化县": "431322", "冷水江市": "431381", "涟源市": "431382", "娄底市": "4313", "吉首市": "433101", "泸溪县": "433122", "凤凰县": "433123", "花垣县": "433124", "保靖县": "433125", "古丈县": "433126", "永顺县": "433127", "龙山县": "433130", "湖南永顺经济开发区": "433173", "湘西土家族苗族自治州": "4331", "湖南省": "43", "荔湾区": "440103", "越秀区": "440104", "海珠区": "440105", "天河区": "440106", "白云区": "520113", "黄埔区": "440112", "番禺区": "440113", "花都区": "440114", "南沙区": "440115", "从化区": "440117", "增城区": "440118", "广州市": "4401", "武江区": "440203", "浈江区": "440204", "曲江区": "440205", "始兴县": "440222", "仁化县": "440224", "翁源县": "440229", "乳源瑶族自治县": "440232", "新丰县": "440233", "乐昌市": "440281", "南雄市": "440282", "韶关市": "4402", "罗湖区": "440303", "福田区": "440304", "宝安区": "440306", "龙岗区": "440307", "盐田区": "440308", "龙华区": "460106", "坪山区": "440310", "光明区": "440311", "深圳市": "4403", "香洲区": "440402", "斗门区": "440403", "金湾区": "440404", "珠海市": "4404", "龙湖区": "440507", "金平区": "440511", "濠江区": "440512", "潮阳区": "440513", "潮南区": "440514", "澄海区": "440515", "南澳县": "440523", "汕头市": "4405", "禅城区": "440604", "南海区": "440605", "顺德区": "440606", "三水区": "440607", "高明区": "440608", "佛山市": "4406", "蓬江区": "440703", "江海区": "440704", "新会区": "440705", "台山市": "440781", "开平市": "440783", "鹤山市": "440784", "恩平市": "440785", "江门市": "4407", "赤坎区": "440802", "霞山区": "440803", "坡头区": "440804", "麻章区": "440811", "遂溪县": "440823", "徐闻县": "440825", "廉江市": "440881", "雷州市": "440882", "吴川市": "440883", "湛江市": "4408", "茂南区": "440902", "电白区": "440904", "高州市": "440981", "化州市": "440982", "信宜市": "440983", "茂名市": "4409", "端州区": "441202", "鼎湖区": "441203", "高要区": "441204", "广宁县": "441223", "怀集县": "441224", "封开县": "441225", "德庆县": "441226", "四会市": "441284", "肇庆市": "4412", "惠城区": "441302", "惠阳区": "441303", "博罗县": "441322", "惠东县": "441323", "龙门县": "441324", "惠州市": "4413", "梅江区": "441402", "梅县区": "441403", "大埔县": "441422", "丰顺县": "441423", "五华县": "441424", "平远县": "441426", "蕉岭县": "441427", "兴宁市": "441481", "梅州市": "4414", "海丰县": "441521", "陆河县": "441523", "陆丰市": "441581", "汕尾市": "4415", "源城区": "441602", "紫金县": "441621", "龙川县": "441622", "连平县": "441623", "和平县": "441624", "东源县": "441625", "河源市": "4416", "江城区": "441702", "阳东区": "441704", "阳西县": "441721", "阳春市": "441781", "阳江市": "4417", "清城区": "441802", "清新区": "441803", "佛冈县": "441821", "阳山县": "441823", "连山壮族瑶族自治县": "441825", "连南瑶族自治县": "441826", "英德市": "441881", "连州市": "441882", "清远市": "4418", "东城街道": "441900003", "南城街道": "441900004", "万江街道": "441900005", "莞城街道": "441900006", "石碣镇": "441900101", "石龙镇": "441900102", "茶山镇": "441900103", "石排镇": "441900104", "企石镇": "441900105", "横沥镇": "441900106", "桥头镇": "441900107", "谢岗镇": "441900108", "东坑镇": "441900109", "常平镇": "441900110", "寮步镇": "441900111", "樟木头镇": "441900112", "大朗镇": "441900113", "黄江镇": "441900114", "清溪镇": "441900115", "塘厦镇": "441900116", "凤岗镇": "441900117", "大岭山镇": "441900118", "长安镇": "441900119", "虎门镇": "441900121", "厚街镇": "441900122", "沙田镇": "441900123", "道滘镇": "441900124", "洪梅镇": "441900125", "麻涌镇": "441900126", "望牛墩镇": "441900127", "中堂镇": "441900128", "高埗镇": "441900129", "松山湖": "441900401", "东莞港": "441900402", "东莞生态园": "441900403", "东莞市": "4419", "石岐街道": "442000001", "东区街道": "442000002", "中山港街道": "442000003", "西区街道": "442000004", "南区街道": "442000005", "五桂山街道": "442000006", "小榄镇": "442000100", "黄圃镇": "442000101", "民众镇": "442000102", "东凤镇": "442000103", "东升镇": "442000104", "古镇镇": "442000105", "沙溪镇": "442000106", "坦洲镇": "442000107", "港口镇": "442000108", "三角镇": "442000109", "横栏镇": "442000110", "南头镇": "442000111", "阜沙镇": "442000112", "南朗镇": "442000113", "三乡镇": "442000114", "板芙镇": "442000115", "大涌镇": "442000116", "神湾镇": "442000117", "中山市": "4420", "湘桥区": "445102", "潮安区": "445103", "饶平县": "445122", "潮州市": "4451", "榕城区": "445202", "揭东区": "445203", "揭西县": "445222", "惠来县": "445224", "普宁市": "445281", "揭阳市": "4452", "云城区": "445302", "云安区": "445303", "新兴县": "445321", "郁南县": "445322", "罗定市": "445381", "云浮市": "4453", "广东省": "44", "兴宁区": "450102", "青秀区": "450103", "江南区": "450105", "西乡塘区": "450107", "良庆区": "450108", "邕宁区": "450109", "武鸣区": "450110", "隆安县": "450123", "马山县": "450124", "上林县": "450125", "宾阳县": "450126", "横县": "450127", "南宁市": "4501", "城中区": "630103", "鱼峰区": "450203", "柳南区": "450204", "柳北区": "450205", "柳江区": "450206", "柳城县": "450222", "鹿寨县": "450223", "融安县": "450224", "融水苗族自治县": "450225", "三江侗族自治县": "450226", "柳州市": "4502", "秀峰区": "450302", "叠彩区": "450303", "象山区": "450304", "七星区": "450305", "雁山区": "450311", "临桂区": "450312", "阳朔县": "450321", "灵川县": "450323", "全州县": "450324", "兴安县": "450325", "永福县": "450326", "灌阳县": "450327", "龙胜各族自治县": "450328", "资源县": "450329", "平乐县": "450330", "恭城瑶族自治县": "450332", "荔浦市": "450381", "桂林市": "4503", "万秀区": "450403", "长洲区": "450405", "龙圩区": "450406", "苍梧县": "450421", "藤县": "450422", "蒙山县": "450423", "岑溪市": "450481", "梧州市": "4504", "海城区": "450502", "银海区": "450503", "铁山港区": "450512", "合浦县": "450521", "北海市": "4505", "港口区": "450602", "防城区": "450603", "上思县": "450621", "东兴市": "450681", "防城港市": "4506", "钦南区": "450702", "钦北区": "450703", "灵山县": "450721", "浦北县": "450722", "钦州市": "4507", "港北区": "450802", "港南区": "450803", "覃塘区": "450804", "平南县": "450821", "桂平市": "450881", "贵港市": "4508", "玉州区": "450902", "福绵区": "450903", "容县": "450921", "陆川县": "450922", "博白县": "450923", "兴业县": "450924", "北流市": "450981", "玉林市": "4509", "右江区": "451002", "田阳区": "451003", "田东县": "451022", "平果县": "451023", "德保县": "451024", "那坡县": "451026", "凌云县": "451027", "乐业县": "451028", "田林县": "451029", "西林县": "451030", "隆林各族自治县": "451031", "靖西市": "451081", "百色市": "4510", "八步区": "451102", "平桂区": "451103", "昭平县": "451121", "钟山县": "451122", "富川瑶族自治县": "451123", "贺州市": "4511", "金城江区": "451202", "宜州区": "451203", "南丹县": "451221", "天峨县": "451222", "凤山县": "451223", "东兰县": "451224", "罗城仫佬族自治县": "451225", "环江毛南族自治县": "451226", "巴马瑶族自治县": "451227", "都安瑶族自治县": "451228", "大化瑶族自治县": "451229", "河池市": "4512", "兴宾区": "451302", "忻城县": "451321", "象州县": "451322", "武宣县": "451323", "金秀瑶族自治县": "451324", "合山市": "451381", "来宾市": "4513", "江州区": "451402", "扶绥县": "451421", "宁明县": "451422", "龙州县": "451423", "大新县": "451424", "天等县": "451425", "凭祥市": "451481", "崇左市": "4514", "广西壮族自治区": "45", "秀英区": "460105", "琼山区": "460107", "美兰区": "460108", "海口市": "4601", "海棠区": "460202", "吉阳区": "460203", "天涯区": "460204", "崖州区": "460205", "三亚市": "4602", "西沙群岛": "460321", "南沙群岛": "460322", "中沙群岛的岛礁及其海域": "460323", "三沙市": "4603", "那大镇": "460400100", "和庆镇": "460400101", "南丰镇": "460400102", "大成镇": "460400103", "雅星镇": "460400104", "兰洋镇": "460400105", "光村镇": "460400106", "木棠镇": "460400107", "海头镇": "460400108", "峨蔓镇": "460400109", "王五镇": "460400111", "白马井镇": "460400112", "中和镇": "460400113", "排浦镇": "460400114", "东成镇": "460400115", "新州镇": "460400116", "洋浦经济开发区": "460400499", "华南热作学院": "460400500", "儋州市": "4604", "五指山市": "469001", "琼海市": "469002", "文昌市": "469005", "万宁市": "469006", "东方市": "469007", "定安县": "469021", "屯昌县": "469022", "澄迈县": "469023", "临高县": "469024", "白沙黎族自治县": "469025", "昌江黎族自治县": "469026", "乐东黎族自治县": "469027", "陵水黎族自治县": "469028", "保亭黎族苗族自治县": "469029", "琼中黎族苗族自治县": "469030", "海南省": "46", "万州区": "500101", "涪陵区": "500102", "渝中区": "500103", "大渡口区": "500104", "沙坪坝区": "500106", "九龙坡区": "500107", "南岸区": "500108", "北碚区": "500109", "綦江区": "500110", "大足区": "500111", "渝北区": "500112", "巴南区": "500113", "黔江区": "500114", "长寿区": "500115", "江津区": "500116", "合川区": "500117", "永川区": "500118", "南川区": "500119", "璧山区": "500120", "铜梁区": "500151", "潼南区": "500152", "荣昌区": "500153", "开州区": "500154", "梁平区": "500155", "武隆区": "500156", "城口县": "500229", "丰都县": "500230", "垫江县": "500231", "忠县": "500233", "云阳县": "500235", "奉节县": "500236", "巫山县": "500237", "巫溪县": "500238", "石柱土家族自治县": "500240", "秀山土家族苗族自治县": "500241", "酉阳土家族苗族自治县": "500242", "彭水苗族土家族自治县": "500243", "县": "5002", "重庆市": "50", "锦江区": "510104", "青羊区": "510105", "金牛区": "510106", "武侯区": "510107", "成华区": "510108", "龙泉驿区": "510112", "青白江区": "510113", "新都区": "510114", "温江区": "510115", "双流区": "510116", "郫都区": "510117", "金堂县": "510121", "大邑县": "510129", "蒲江县": "510131", "新津县": "510132", "都江堰市": "510181", "彭州市": "510182", "邛崃市": "510183", "崇州市": "510184", "简阳市": "510185", "成都市": "5101", "自流井区": "510302", "贡井区": "510303", "大安区": "510304", "沿滩区": "510311", "荣县": "510321", "富顺县": "510322", "自贡市": "5103", "东区": "510402", "西区": "510403", "仁和区": "510411", "米易县": "510421", "盐边县": "510422", "攀枝花市": "5104", "江阳区": "510502", "纳溪区": "510503", "龙马潭区": "510504", "泸县": "510521", "合江县": "510522", "叙永县": "510524", "古蔺县": "510525", "泸州市": "5105", "旌阳区": "510603", "罗江区": "510604", "中江县": "510623", "广汉市": "510681", "什邡市": "510682", "绵竹市": "510683", "德阳市": "5106", "涪城区": "510703", "游仙区": "510704", "安州区": "510705", "三台县": "510722", "盐亭县": "510723", "梓潼县": "510725", "北川羌族自治县": "510726", "平武县": "510727", "江油市": "510781", "绵阳市": "5107", "利州区": "510802", "昭化区": "510811", "朝天区": "510812", "旺苍县": "510821", "青川县": "510822", "剑阁县": "510823", "苍溪县": "510824", "广元市": "5108", "船山区": "510903", "安居区": "510904", "蓬溪县": "510921", "大英县": "510923", "射洪市": "510981", "遂宁市": "5109", "东兴区": "511011", "威远县": "511024", "资中县": "511025", "内江经济开发区": "511071", "隆昌市": "511083", "内江市": "5110", "沙湾区": "511111", "五通桥区": "511112", "金口河区": "511113", "犍为县": "511123", "井研县": "511124", "夹江县": "511126", "沐川县": "511129", "峨边彝族自治县": "511132", "马边彝族自治县": "511133", "峨眉山市": "511181", "乐山市": "5111", "顺庆区": "511302", "高坪区": "511303", "嘉陵区": "511304", "南部县": "511321", "营山县": "511322", "蓬安县": "511323", "仪陇县": "511324", "西充县": "511325", "阆中市": "511381", "南充市": "5113", "东坡区": "511402", "彭山区": "511403", "仁寿县": "511421", "洪雅县": "511423", "丹棱县": "511424", "青神县": "511425", "眉山市": "5114", "翠屏区": "511502", "南溪区": "511503", "叙州区": "511504", "江安县": "511523", "长宁县": "511524", "高县": "511525", "珙县": "511526", "筠连县": "511527", "兴文县": "511528", "屏山县": "511529", "宜宾市": "5115", "广安区": "511602", "前锋区": "511603", "岳池县": "511621", "武胜县": "511622", "邻水县": "511623", "华蓥市": "511681", "广安市": "5116", "通川区": "511702", "达川区": "511703", "宣汉县": "511722", "开江县": "511723", "大竹县": "511724", "渠县": "511725", "达州经济开发区": "511771", "万源市": "511781", "达州市": "5117", "雨城区": "511802", "名山区": "511803", "荥经县": "511822", "汉源县": "511823", "石棉县": "511824", "天全县": "511825", "芦山县": "511826", "宝兴县": "511827", "雅安市": "5118", "巴州区": "511902", "恩阳区": "511903", "通江县": "511921", "南江县": "511922", "平昌县": "511923", "巴中经济开发区": "511971", "巴中市": "5119", "雁江区": "512002", "安岳县": "512021", "乐至县": "512022", "资阳市": "5120", "马尔康市": "513201", "汶川县": "513221", "理县": "513222", "茂县": "513223", "松潘县": "513224", "九寨沟县": "513225", "金川县": "513226", "小金县": "513227", "黑水县": "513228", "壤塘县": "513230", "阿坝县": "513231", "若尔盖县": "513232", "红原县": "513233", "阿坝藏族羌族自治州": "5132", "康定市": "513301", "泸定县": "513322", "丹巴县": "513323", "九龙县": "513324", "雅江县": "513325", "道孚县": "513326", "炉霍县": "513327", "甘孜县": "513328", "新龙县": "513329", "德格县": "513330", "白玉县": "513331", "石渠县": "513332", "色达县": "513333", "理塘县": "513334", "巴塘县": "513335", "乡城县": "513336", "稻城县": "513337", "得荣县": "513338", "甘孜藏族自治州": "5133", "西昌市": "513401", "木里藏族自治县": "513422", "盐源县": "513423", "德昌县": "513424", "会理县": "513425", "会东县": "513426", "宁南县": "513427", "普格县": "513428", "布拖县": "513429", "金阳县": "513430", "昭觉县": "513431", "喜德县": "513432", "冕宁县": "513433", "越西县": "513434", "甘洛县": "513435", "美姑县": "513436", "雷波县": "513437", "凉山彝族自治州": "5134", "四川省": "51", "南明区": "520102", "云岩区": "520103", "花溪区": "520111", "乌当区": "520112", "观山湖区": "520115", "开阳县": "520121", "息烽县": "520122", "修文县": "520123", "清镇市": "520181", "贵阳市": "5201", "钟山区": "520201", "六枝特区": "520203", "水城县": "520221", "盘州市": "520281", "六盘水市": "5202", "红花岗区": "520302", "汇川区": "520303", "播州区": "520304", "桐梓县": "520322", "绥阳县": "520323", "正安县": "520324", "道真仡佬族苗族自治县": "520325", "务川仡佬族苗族自治县": "520326", "凤冈县": "520327", "湄潭县": "520328", "余庆县": "520329", "习水县": "520330", "赤水市": "520381", "仁怀市": "520382", "遵义市": "5203", "西秀区": "520402", "平坝区": "520403", "普定县": "520422", "镇宁布依族苗族自治县": "520423", "关岭布依族苗族自治县": "520424", "紫云苗族布依族自治县": "520425", "安顺市": "5204", "七星关区": "520502", "大方县": "520521", "黔西县": "520522", "金沙县": "520523", "织金县": "520524", "纳雍县": "520525", "威宁彝族回族苗族自治县": "520526", "赫章县": "520527", "毕节市": "5205", "碧江区": "520602", "万山区": "520603", "江口县": "520621", "玉屏侗族自治县": "520622", "石阡县": "520623", "思南县": "520624", "印江土家族苗族自治县": "520625", "德江县": "520626", "沿河土家族自治县": "520627", "松桃苗族自治县": "520628", "铜仁市": "5206", "兴义市": "522301", "兴仁市": "522302", "普安县": "522323", "晴隆县": "522324", "贞丰县": "522325", "望谟县": "522326", "册亨县": "522327", "安龙县": "522328", "黔西南布依族苗族自治州": "5223", "凯里市": "522601", "黄平县": "522622", "施秉县": "522623", "三穗县": "522624", "镇远县": "522625", "岑巩县": "522626", "天柱县": "522627", "锦屏县": "522628", "剑河县": "522629", "台江县": "522630", "黎平县": "522631", "榕江县": "522632", "从江县": "522633", "雷山县": "522634", "麻江县": "522635", "丹寨县": "522636", "黔东南苗族侗族自治州": "5226", "都匀市": "522701", "福泉市": "522702", "荔波县": "522722", "贵定县": "522723", "瓮安县": "522725", "独山县": "522726", "平塘县": "522727", "罗甸县": "522728", "长顺县": "522729", "龙里县": "522730", "惠水县": "522731", "三都水族自治县": "522732", "黔南布依族苗族自治州": "5227", "贵州省": "52", "五华区": "530102", "盘龙区": "530103", "官渡区": "530111", "西山区": "530112", "东川区": "530113", "呈贡区": "530114", "晋宁区": "530115", "富民县": "530124", "宜良县": "530125", "石林彝族自治县": "530126", "嵩明县": "530127", "禄劝彝族苗族自治县": "530128", "寻甸回族彝族自治县": "530129", "安宁市": "530181", "昆明市": "5301", "麒麟区": "530302", "沾益区": "530303", "马龙区": "530304", "陆良县": "530322", "师宗县": "530323", "罗平县": "530324", "富源县": "530325", "会泽县": "530326", "宣威市": "530381", "曲靖市": "5303", "红塔区": "530402", "江川区": "530403", "澄江县": "530422", "通海县": "530423", "华宁县": "530424", "易门县": "530425", "峨山彝族自治县": "530426", "新平彝族傣族自治县": "530427", "元江哈尼族彝族傣族自治县": "530428", "玉溪市": "5304", "隆阳区": "530502", "施甸县": "530521", "龙陵县": "530523", "昌宁县": "530524", "腾冲市": "530581", "保山市": "5305", "昭阳区": "530602", "鲁甸县": "530621", "巧家县": "530622", "盐津县": "530623", "大关县": "530624", "永善县": "530625", "绥江县": "530626", "镇雄县": "530627", "彝良县": "530628", "威信县": "530629", "水富市": "530681", "昭通市": "5306", "古城区": "530702", "玉龙纳西族自治县": "530721", "永胜县": "530722", "华坪县": "530723", "宁蒗彝族自治县": "530724", "丽江市": "5307", "思茅区": "530802", "宁洱哈尼族彝族自治县": "530821", "墨江哈尼族自治县": "530822", "景东彝族自治县": "530823", "景谷傣族彝族自治县": "530824", "镇沅彝族哈尼族拉祜族自治县": "530825", "江城哈尼族彝族自治县": "530826", "孟连傣族拉祜族佤族自治县": "530827", "澜沧拉祜族自治县": "530828", "西盟佤族自治县": "530829", "普洱市": "5308", "临翔区": "530902", "凤庆县": "530921", "云县": "530922", "永德县": "530923", "镇康县": "530924", "双江拉祜族佤族布朗族傣族自治县": "530925", "耿马傣族佤族自治县": "530926", "沧源佤族自治县": "530927", "临沧市": "5309", "楚雄市": "532301", "双柏县": "532322", "牟定县": "532323", "南华县": "532324", "姚安县": "532325", "大姚县": "532326", "永仁县": "532327", "元谋县": "532328", "武定县": "532329", "禄丰县": "532331", "楚雄彝族自治州": "5323", "个旧市": "532501", "开远市": "532502", "蒙自市": "532503", "弥勒市": "532504", "屏边苗族自治县": "532523", "建水县": "532524", "石屏县": "532525", "泸西县": "532527", "元阳县": "532528", "红河县": "532529", "金平苗族瑶族傣族自治县": "532530", "绿春县": "532531", "河口瑶族自治县": "532532", "红河哈尼族彝族自治州": "5325", "文山市": "532601", "砚山县": "532622", "西畴县": "532623", "麻栗坡县": "532624", "马关县": "532625", "丘北县": "532626", "广南县": "532627", "富宁县": "532628", "文山壮族苗族自治州": "5326", "景洪市": "532801", "勐海县": "532822", "勐腊县": "532823", "西双版纳傣族自治州": "5328", "大理市": "532901", "漾濞彝族自治县": "532922", "祥云县": "532923", "宾川县": "532924", "弥渡县": "532925", "南涧彝族自治县": "532926", "巍山彝族回族自治县": "532927", "永平县": "532928", "云龙县": "532929", "洱源县": "532930", "剑川县": "532931", "鹤庆县": "532932", "大理白族自治州": "5329", "瑞丽市": "533102", "芒市": "533103", "梁河县": "533122", "盈江县": "533123", "陇川县": "533124", "德宏傣族景颇族自治州": "5331", "泸水市": "533301", "福贡县": "533323", "贡山独龙族怒族自治县": "533324", "兰坪白族普米族自治县": "533325", "怒江傈僳族自治州": "5333", "香格里拉市": "533401", "德钦县": "533422", "维西傈僳族自治县": "533423", "迪庆藏族自治州": "5334", "云南省": "53", "城关区": "620102", "堆龙德庆区": "540103", "达孜区": "540104", "林周县": "540121", "当雄县": "540122", "尼木县": "540123", "曲水县": "540124", "墨竹工卡县": "540127", "格尔木藏青工业园区": "540171", "拉萨经济技术开发区": "540172", "西藏文化旅游创意园区": "540173", "达孜工业园区": "540174", "拉萨市": "5401", "桑珠孜区": "540202", "南木林县": "540221", "江孜县": "540222", "定日县": "540223", "萨迦县": "540224", "拉孜县": "540225", "昂仁县": "540226", "谢通门县": "540227", "白朗县": "540228", "仁布县": "540229", "康马县": "540230", "定结县": "540231", "仲巴县": "540232", "亚东县": "540233", "吉隆县": "540234", "聂拉木县": "540235", "萨嘎县": "540236", "岗巴县": "540237", "日喀则市": "5402", "卡若区": "540302", "江达县": "540321", "贡觉县": "540322", "类乌齐县": "540323", "丁青县": "540324", "察雅县": "540325", "八宿县": "540326", "左贡县": "540327", "芒康县": "540328", "洛隆县": "540329", "边坝县": "540330", "昌都市": "5403", "巴宜区": "540402", "工布江达县": "540421", "米林县": "540422", "墨脱县": "540423", "波密县": "540424", "察隅县": "540425", "朗县": "540426", "林芝市": "5404", "乃东区": "540502", "扎囊县": "540521", "贡嘎县": "540522", "桑日县": "540523", "琼结县": "540524", "曲松县": "540525", "措美县": "540526", "洛扎县": "540527", "加查县": "540528", "隆子县": "540529", "错那县": "540530", "浪卡子县": "540531", "山南市": "5405", "色尼区": "540602", "嘉黎县": "540621", "比如县": "540622", "聂荣县": "540623", "安多县": "540624", "申扎县": "540625", "索县": "540626", "班戈县": "540627", "巴青县": "540628", "尼玛县": "540629", "双湖县": "540630", "那曲市": "5406", "普兰县": "542521", "札达县": "542522", "噶尔县": "542523", "日土县": "542524", "革吉县": "542525", "改则县": "542526", "措勤县": "542527", "阿里地区": "5425", "西藏自治区": "54", "碑林区": "610103", "莲湖区": "610104", "灞桥区": "610111", "未央区": "610112", "雁塔区": "610113", "阎良区": "610114", "临潼区": "610115", "高陵区": "610117", "鄠邑区": "610118", "蓝田县": "610122", "周至县": "610124", "西安市": "6101", "王益区": "610202", "印台区": "610203", "耀州区": "610204", "宜君县": "610222", "铜川市": "6102", "渭滨区": "610302", "金台区": "610303", "陈仓区": "610304", "凤翔县": "610322", "岐山县": "610323", "扶风县": "610324", "眉县": "610326", "陇县": "610327", "千阳县": "610328", "麟游县": "610329", "凤县": "610330", "太白县": "610331", "宝鸡市": "6103", "秦都区": "610402", "杨陵区": "610403", "渭城区": "610404", "三原县": "610422", "泾阳县": "610423", "乾县": "610424", "礼泉县": "610425", "永寿县": "610426", "长武县": "610428", "旬邑县": "610429", "淳化县": "610430", "武功县": "610431", "兴平市": "610481", "彬州市": "610482", "咸阳市": "6104", "临渭区": "610502", "华州区": "610503", "潼关县": "610522", "大荔县": "610523", "合阳县": "610524", "澄城县": "610525", "蒲城县": "610526", "白水县": "610527", "富平县": "610528", "韩城市": "610581", "华阴市": "610582", "渭南市": "6105", "宝塔区": "610602", "安塞区": "610603", "延长县": "610621", "延川县": "610622", "志丹县": "610625", "吴起县": "610626", "甘泉县": "610627", "富县": "610628", "洛川县": "610629", "宜川县": "610630", "黄龙县": "610631", "黄陵县": "610632", "子长市": "610681", "延安市": "6106", "汉台区": "610702", "南郑区": "610703", "城固县": "610722", "洋县": "610723", "西乡县": "610724", "勉县": "610725", "宁强县": "610726", "略阳县": "610727", "镇巴县": "610728", "留坝县": "610729", "佛坪县": "610730", "汉中市": "6107", "榆阳区": "610802", "横山区": "610803", "府谷县": "610822", "靖边县": "610824", "定边县": "610825", "绥德县": "610826", "米脂县": "610827", "佳县": "610828", "吴堡县": "610829", "清涧县": "610830", "子洲县": "610831", "神木市": "610881", "榆林市": "6108", "汉滨区": "610902", "汉阴县": "610921", "石泉县": "610922", "宁陕县": "610923", "紫阳县": "610924", "岚皋县": "610925", "平利县": "610926", "镇坪县": "610927", "旬阳县": "610928", "白河县": "610929", "安康市": "6109", "商州区": "611002", "洛南县": "611021", "丹凤县": "611022", "商南县": "611023", "山阳县": "611024", "镇安县": "611025", "柞水县": "611026", "商洛市": "6110", "陕西省": "61", "七里河区": "620103", "西固区": "620104", "安宁区": "620105", "红古区": "620111", "永登县": "620121", "皋兰县": "620122", "榆中县": "620123", "兰州新区": "620171", "兰州市": "6201", "新城镇": "620201100", "峪泉镇": "620201101", "文殊镇": "620201102", "雄关区": "620201401", "镜铁区": "620201402", "长城区": "620201403", "嘉峪关市": "6202", "金川区": "620302", "永昌县": "620321", "金昌市": "6203", "白银区": "620402", "平川区": "620403", "靖远县": "620421", "会宁县": "620422", "景泰县": "620423", "白银市": "6204", "秦州区": "620502", "麦积区": "620503", "清水县": "620521", "秦安县": "620522", "甘谷县": "620523", "武山县": "620524", "张家川回族自治县": "620525", "天水市": "6205", "凉州区": "620602", "民勤县": "620621", "古浪县": "620622", "天祝藏族自治县": "620623", "武威市": "6206", "甘州区": "620702", "肃南裕固族自治县": "620721", "民乐县": "620722", "临泽县": "620723", "高台县": "620724", "山丹县": "620725", "张掖市": "6207", "崆峒区": "620802", "泾川县": "620821", "灵台县": "620822", "崇信县": "620823", "庄浪县": "620825", "静宁县": "620826", "华亭市": "620881", "平凉市": "6208", "肃州区": "620902", "金塔县": "620921", "瓜州县": "620922", "肃北蒙古族自治县": "620923", "阿克塞哈萨克族自治县": "620924", "玉门市": "620981", "敦煌市": "620982", "酒泉市": "6209", "西峰区": "621002", "庆城县": "621021", "环县": "621022", "华池县": "621023", "合水县": "621024", "正宁县": "621025", "宁县": "621026", "镇原县": "621027", "庆阳市": "6210", "安定区": "621102", "通渭县": "621121", "陇西县": "621122", "渭源县": "621123", "临洮县": "621124", "漳县": "621125", "岷县": "621126", "定西市": "6211", "武都区": "621202", "成县": "621221", "文县": "621222", "宕昌县": "621223", "康县": "621224", "西和县": "621225", "礼县": "621226", "徽县": "621227", "两当县": "621228", "陇南市": "6212", "临夏市": "622901", "临夏县": "622921", "康乐县": "622922", "永靖县": "622923", "广河县": "622924", "和政县": "622925", "东乡族自治县": "622926", "积石山保安族东乡族撒拉族自治县": "622927", "临夏回族自治州": "6229", "合作市": "623001", "临潭县": "623021", "卓尼县": "623022", "舟曲县": "623023", "迭部县": "623024", "玛曲县": "623025", "碌曲县": "623026", "夏河县": "623027", "甘南藏族自治州": "6230", "甘肃省": "62", "城东区": "630102", "城西区": "630104", "城北区": "630105", "大通回族土族自治县": "630121", "湟中县": "630122", "湟源县": "630123", "西宁市": "6301", "乐都区": "630202", "平安区": "630203", "民和回族土族自治县": "630222", "互助土族自治县": "630223", "化隆回族自治县": "630224", "循化撒拉族自治县": "630225", "海东市": "6302", "门源回族自治县": "632221", "祁连县": "632222", "海晏县": "632223", "刚察县": "632224", "海北藏族自治州": "6322", "同仁县": "632321", "尖扎县": "632322", "泽库县": "632323", "河南蒙古族自治县": "632324", "黄南藏族自治州": "6323", "共和县": "632521", "同德县": "632522", "贵德县": "632523", "兴海县": "632524", "贵南县": "632525", "海南藏族自治州": "6325", "玛沁县": "632621", "班玛县": "632622", "甘德县": "632623", "达日县": "632624", "久治县": "632625", "玛多县": "632626", "果洛藏族自治州": "6326", "玉树市": "632701", "杂多县": "632722", "称多县": "632723", "治多县": "632724", "囊谦县": "632725", "曲麻莱县": "632726", "玉树藏族自治州": "6327", "格尔木市": "632801", "德令哈市": "632802", "茫崖市": "632803", "乌兰县": "632821", "都兰县": "632822", "天峻县": "632823", "大柴旦行政委员会": "632857", "海西蒙古族藏族自治州": "6328", "青海省": "63", "兴庆区": "640104", "西夏区": "640105", "金凤区": "640106", "永宁县": "640121", "贺兰县": "640122", "灵武市": "640181", "银川市": "6401", "大武口区": "640202", "惠农区": "640205", "平罗县": "640221", "石嘴山市": "6402", "利通区": "640302", "红寺堡区": "640303", "盐池县": "640323", "同心县": "640324", "青铜峡市": "640381", "吴忠市": "6403", "原州区": "640402", "西吉县": "640422", "隆德县": "640423", "泾源县": "640424", "彭阳县": "640425", "固原市": "6404", "沙坡头区": "640502", "中宁县": "640521", "海原县": "640522", "中卫市": "6405", "宁夏回族自治区": "64", "天山区": "650102", "沙依巴克区": "650103", "新市区": "650104", "水磨沟区": "650105", "头屯河区": "650106", "达坂城区": "650107", "米东区": "650109", "乌鲁木齐县": "650121", "乌鲁木齐市": "6501", "独山子区": "650202", "克拉玛依区": "650203", "白碱滩区": "650204", "乌尔禾区": "650205", "克拉玛依市": "6502", "高昌区": "650402", "鄯善县": "650421", "托克逊县": "650422", "吐鲁番市": "6504", "伊州区": "650502", "巴里坤哈萨克自治县": "650521", "伊吾县": "650522", "哈密市": "6505", "昌吉市": "652301", "阜康市": "652302", "呼图壁县": "652323", "玛纳斯县": "652324", "奇台县": "652325", "吉木萨尔县": "652327", "木垒哈萨克自治县": "652328", "昌吉回族自治州": "6523", "博乐市": "652701", "阿拉山口市": "652702", "精河县": "652722", "温泉县": "652723", "博尔塔拉蒙古自治州": "6527", "库尔勒市": "652801", "轮台县": "652822", "尉犁县": "652823", "若羌县": "652824", "且末县": "652825", "焉耆回族自治县": "652826", "和静县": "652827", "和硕县": "652828", "博湖县": "652829", "库尔勒经济技术开发区": "652871", "巴音郭楞蒙古自治州": "6528", "阿克苏市": "652901", "温宿县": "652922", "库车县": "652923", "沙雅县": "652924", "新和县": "652925", "拜城县": "652926", "乌什县": "652927", "阿瓦提县": "652928", "柯坪县": "652929", "阿克苏地区": "6529", "阿图什市": "653001", "阿克陶县": "653022", "阿合奇县": "653023", "乌恰县": "653024", "克孜勒苏柯尔克孜自治州": "6530", "喀什市": "653101", "疏附县": "653121", "疏勒县": "653122", "英吉沙县": "653123", "泽普县": "653124", "莎车县": "653125", "叶城县": "653126", "麦盖提县": "653127", "岳普湖县": "653128", "伽师县": "653129", "巴楚县": "653130", "塔什库尔干塔吉克自治县": "653131", "喀什地区": "6531", "和田市": "653201", "和田县": "653221", "墨玉县": "653222", "皮山县": "653223", "洛浦县": "653224", "策勒县": "653225", "于田县": "653226", "民丰县": "653227", "和田地区": "6532", "伊宁市": "654002", "奎屯市": "654003", "霍尔果斯市": "654004", "伊宁县": "654021", "察布查尔锡伯自治县": "654022", "霍城县": "654023", "巩留县": "654024", "新源县": "654025", "昭苏县": "654026", "特克斯县": "654027", "尼勒克县": "654028", "伊犁哈萨克自治州": "6540", "塔城市": "654201", "乌苏市": "654202", "额敏县": "654221", "沙湾县": "654223", "托里县": "654224", "裕民县": "654225", "和布克赛尔蒙古自治县": "654226", "塔城地区": "6542", "阿勒泰市": "654301", "布尔津县": "654321", "富蕴县": "654322", "福海县": "654323", "哈巴河县": "654324", "青河县": "654325", "吉木乃县": "654326", "阿勒泰地区": "6543", "石河子市": "659001", "阿拉尔市": "659002", "图木舒克市": "659003", "五家渠市": "659004", "铁门关市": "659006", "自治区直辖县级行政区划": "6590", "新疆维吾尔自治区": "65" }
                        let cityCode = placesMap[chartOption.geoJSON]
                        if (String(cityCode).length < 6) {
                            cityCode = String(cityCode).padEnd(6, '0')
                            cityCode = Number(cityCode)
                        }
                        let geoJson = null
                        try {
                            geoJson = await axios.get(`https://geo.datav.aliyun.com/areas_v2/bound/${cityCode}_full.json`)
                        } catch (err) {
                            geoJson = await axios.get(`https://geo.datav.aliyun.com/areas_v2/bound/${cityCode}.json`)
                        }
                        echarts.registerMap('myCity', geoJson.data);
                        // 增加返回按钮
                        if (name === 'runInMap') {
                            chartOption.visualMap.inRange.color = chartOption.color // 支持一键换肤
                            $('<div class="back">返 回</div>').appendTo(
                                $(`#${id}`)
                            );
                            $('.back').css({
                                'position': 'absolute',
                                'left': '25px',
                                'top': '25px',
                                'color': 'rgb(179, 239, 255)',
                                'font-size': '16px',
                                cursor: 'pointer',
                                'z-index': '100'
                            })
                            $('.back').click(() => {
                                if (chartOption.parentInfo.length === 0) {
                                    chartOption.geoJSON = '全国' // 没有上一级则返回全国
                                } else {
                                    chartOption.parentInfo.pop()
                                    chartOption.geoJSON = chartOption.parentInfo[chartOption.parentInfo.length - 1].cityName
                                }
                                this.initChart(myChart, chartOption, option, id, name)
                            })
                        }

                    };
                    break;
            }
            if (option[xOry]) {
                chartOption.series[0] && chartOption.series[0].data && chartOption.series[0].data.map(it => {
                    chartOption[xOry].data.push(it.name) // series第0项的name作为x轴
                })
            } else {
                delete chartOption[xOry]
            }

            // myChart = echarts.init(document.getElementById(id), null, { renderer: 'canvas' }); // svg渲染 防止放大导致模糊
            this.fixZomm(myChart, chartOption, id)
            myChart.setOption(chartOption, true);
            myChart.resize()
            if (name === 'runInMap') {
                myChart.off('click');
                myChart.on('click', (params) => {
                    if (!chartOption.parentInfo) {
                        chartOption.parentInfo = []
                    }
                    if (chartOption.parentInfo.length === 3) return; // 最后一个直接return
                    chartOption.parentInfo.push({
                        cityName: params.name,
                    })
                    chartOption.geoJSON = params.name
                    this.initChart(myChart, chartOption, option, id, name)
                })
            }

        },
        initComponent() {
            Vue.component('x-grouplist', {
                props: {
                    item: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    }
                },
                template: `
        <div v-if="item.property.type==='group'" :id="'groupOutLayer'+item.property.elementId"
                  :key="item.property.elementId" class="groupOutLayer "
                   :class="{activeOutLayer:item.property.elementId===vm.nowGroupId,
                  moveActive: item.property.elementId === vm.mouseenterGroup && item.property.elementId!==vm.nowGroupId}"
                  @mouseenter="vm.mouseenterGroupTemplate($event,true)"
                  @mouseleave="vm.mouseenterGroupTemplate($event,false)"
                  @mousedown.stop="vm.clickGroup(item.property.elementId)">
                 <x-grouplist v-for="child in item.property.children" :key="child.property.elementId" :item="child" ></x-grouplist>
                 <template v-if="item.property.type === 'group' && item.property.elementId === vm.nowGroupId">
                 <div class="quickOperate">
                   <div id="groupMove"><i class="el-icon-rank"></i> </div>
                 </div>
               </template>
         </template>
        </div>
        <x-singleTemplate v-else  :item="item"/>
        `
            })
            Vue.component('x-singleTemplate', {
                props: {
                    item: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `
                <div  class="chart-item" :id="item.property.elementId+'chart-item'"
        @mousedown.stop="vm.clickTemplate(item.property.elementId)"
        @dblclick.stop="vm.dblclickTemplate(item.property.elementId)"
        @mouseenter="vm.mouseenter($event,true)"
        @mouseleave="vm.mouseenter($event,false)" :ref="item.property.elementId+'Template'"
         :class="{hidden:item.property.isHidden,
          'activeItem':item.property.elementId == vm.nowId,
          moveActive: item.property.elementId === vm.mouseenterTemplate && item.property.elementId !== vm.nowId,
          heighLight:(item.isHorizontal || item.isVertical|| item.isHorCenter || item.isVerCenter )&&vm.isMove ,
          isMove:vm.isMove,
          isMultipyMove: vm.multiplyMoveList.includes(item.property.elementId)}">   <div class='main animate__animated'
          :class="['animate__'+item.property.animate.default,item.property.selfAnimate&&item.property.selfAnimate.default]" 
          :style="{background:item.property.background?'url('+item.property.background+') no-repeat':'none'}" >
          <div :id="item.property.elementId+'rotate'" :class="[{'notClickable':!item.isClickable&&item.property.elementId === vm.nowId}]">
            <component   :v-loading="item.loading" 
              :data-type="item.property.type"
              :key="item.isLoading"
              :is="'x-'+(item.componentsType=='private'?'private': item.property.type)"
              :link="item.property.multLink" :config="item.property.bluePrintConfig"
              :option="item.property.option" :id="item.property.elementId" />
          </div>

        </div>
        <template v-if="item.property.elementId=== vm.nowId&& !item.isLock || vm.multiplyStatus">
        <div v-if="!vm.multiplyStatus && item.property.width>280 && item.property.height > 100"
          class="quickOperate">
          <div @click="vm.deleteTemplate"><i class="el-icon-close"></i> </div>
          <div @click="vm.copyTemplate"><i class="el-icon-copy-document"></i> </div>
          <div @click="vm.moveUp"><i class="el-icon-top"></i> </div>
          <div @click="vm.moveDown"><i class="el-icon-bottom"></i> </div>
          <div @click="vm.sticky"><i class="el-icon-upload2"></i> </div>
          <div @click="vm.setLow"><i class="el-icon-download"></i> </div>
          <div><i class="el-icon-refresh-right"></i> </div>
          <div><i class="el-icon-rank"></i> </div>
        </div>
        <div v-if="!vm.multiplyStatus" class="handle handle-top"></div>
        <div v-if="!vm.multiplyStatus" class="handle handle-right"></div>
        <div v-if="!vm.multiplyStatus" class="handle handle-bottom"></div>
        <div v-if="!vm.multiplyStatus" class="handle handle-left"></div>
        <div v-if="!vm.multiplyStatus" class="handle coor"></div>
        <div v-show="vm.isMove ||  vm.multiplyStatus">
          <div class="widthLine"></div>
          <div class="widthLine1"></div>
          <div class="widthLine2"></div>
          <div class="widthLine3"></div>
          <div class="heightLine"></div>
          <div class="heightLine1"></div>
          <div class="heightLine2"></div>
          <div class="heightLine3"></div>
          <span class="coordinate">{{item.property.left}},{{item.property.top}}</span>
        </div>
        </template>
      </div>`
            })
            this.lineBarPie.forEach(item => {
                Vue.component(`x-${item}`, {
                    props: {
                        option: {
                            type: Object,
                            default: () => {
                                return {};
                            },
                        },
                        id: {
                            type: String,
                            default: ''
                        }
                    },
                    watch: {
                        option: {
                            handler(newVal) {
                                vm.initChart(this.myChart, this.chartOption, newVal, this.id, item)
                            },
                            // deep: true
                        }
                    },
                    data() {
                        return {
                            chartOption: {
                                legend: {
                                    data: []
                                },
                                xAxis: {
                                    data: []
                                }
                            },
                            myChart: null
                        }
                    },
                    mounted() {
                        this.myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' }) // 外面获取 因为改变尺寸图表要resize
                        vm.initChart(this.myChart, this.chartOption, this.option, this.id, item)
                    },
                    beforeDestroy() {
                        this.myChart.clear()
                    },
                    methods: {
                        handleResize() {
                            vm.debounce(this.myChart.resize, 200)
                        }
                    },
                    template: `<div class="full">
          <div :id="id" class="full"></div>
          <resize-observer @notify="handleResize" />
          </div>`,
                });
            })

       

            // table组件
            Vue.component('x-singleHorBar', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler(newVal) {
                            vm.initChart(this.myChart, this.chartOption, newVal, this.id, 'singleHorBar')
                        },
                        // deep: true
                    }
                },
                data() {
                    return {
                        chartOption: {
                            yAxis: {
                                data: []
                            }
                        },
                        myChart: null
                    }
                },
                beforeDestroy() {
                    this.myChart.clear()
                },
                mounted() {
                    this.myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' })
                    vm.initChart(this.myChart, this.chartOption, this.option, this.id, 'singleHorBar')
                },
                methods: {
                    handleResize() {
                        vm.debounce(this.myChart.resize, 200)
                    }
                },
                template: `<div class="full">
        <div :id="id" class="full"></div>
        <resize-observer @notify="handleResize" />
        </div>`,
            })
            Vue.component('x-rotateColorful', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler(newVal) {
                            vm.initChart(this.myChart, this.chartOption, newVal, this.id, 'rotateColorful')
                        },
                        // deep: true
                    }
                },
                data() {
                    return {
                        chartOption: {
                            legend: {
                                data: []
                            }
                        },
                        myChart: null
                    }
                },
                beforeDestroy() {
                    this.myChart.clear()
                },
                mounted() {
                    this.myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' })
                    vm.initChart(this.myChart, this.chartOption, this.option, this.id, 'rotateColorful')
                },
                methods: {
                    handleResize() {
                        vm.debounce(this.myChart.resize, 200)
                    }
                },
                template: `
        <div class="wrap-container rotateColorful-container full" >
          <div class="sn-content">
            <div class="sn-body">
              <div class="wrap-container">
                <div class="pie">
                  <div class="pies pie1"></div>
                  <div class="pies pie2"></div>
                  <div class="pies pie3"></div>
                  <div class="pie4"></div>
                </div>
                <div class="chartsdom full" :id="id"></div>
              </div>
            </div>
          </div>
          <resize-observer @notify="handleResize" />
        </div>
         `,
            })
            Vue.component('x-table', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        }
                    }
                },
                watch: {
                    option: {
                        handler() {
                            this.init()
                        }
                    }
                },
                mounted() {
                    this.init()
                },
                methods: {
                    init() {
                        const s = x_spreadsheet('#excelDiv', {
                            mode: 'read',
                            showToolbar: false,
                            showContextmenu: false,
                        });
                        s.loadData(this.option.data)
                        s.reRender()
                    }
                },
                template: `<div id="excel">
                   <div id="excelDiv" ></div>
                    </div>`,
            });
            // list组件
            Vue.component('x-list', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                mounted() {
                    this.initAnimation();
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        clearInterval(this.timer);
                        const step = Number(this.option.liHeight) + 42; // 42是各种边框的大小
                        const that = this;
                        // 计算总共有多少条数据
                        const maxDataLength = this.option.data.length;
                        // 一页显示多少条数据 当前页面高度 / liHeight 取整
                        const onePageCount = Math.round(
                            (this.$refs.listContent.offsetHeight || 400) / step,
                        );
                        that.timer = setInterval(() => {
                            if (
                                that.currentIndex >=
                                maxDataLength - onePageCount + Math.round(onePageCount / 2)
                            ) {
                                if (that.$refs.liX !== undefined) {
                                    setTimeout(() => {
                                        that.$refs.liX.style.marginTop = '0px';
                                        that.currentIndex = 0;
                                    }, 1000);
                                }
                            } else {
                                const nowStep = that.currentIndex++ * step;
                                if (that.$refs.liX !== undefined) {
                                    that.$refs.liX.style.marginTop = `-${nowStep}px`;
                                }
                            }
                        }, this.option.Animationtime * 1000);
                    },
                    getBorder() {
                        return `1px dotted ${this.option.indexBorderColor}`
                    }
                },
                template: `<div ref="listContent" class="listContent">
                      <ul
                        ref="liX"
                        :style="{
                          opacity:option.opacity,
                          height:option.height
                        }"
                        class="myListBaseCss"
                      >
                        <li
                          v-for="(item,index) in option.data"
                          :key="index"
                          style="line-height:32px"
                          :style="{
                            height:option.liHeight+'px',
                            opacity:option.liOpacity
                          }"
                        >
                          <div v-if="option.selectStyle.default === option.selectStyle.option[0].value " 
                          :class="[index===0?'listTop1':index===1?'listTop2':index===2?'listTop3':'listTop4']" 
                          :style="{color:option.indexColor,fontSize:option.indexFontSize}">{{index+1}}</div>

                          <div v-else-if="option.selectStyle.default === option.selectStyle.option[1].value " class="style1"
                          :style="{border:getBorder(),color:option.indexColor,fontSize:option.indexFontSize}">{{index+1}}</div>
                          <div class="list-content">
                              <p class="list-info" :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                              <p class="list-from">
                                  <span class="list-organization" :style="{fontSize:option.leftFontSize,color:option.fromColor}">{{item.from}}</span>
                                  <span class="list-time" :style="{fontSize:option.rightFontSize,color:option.timeColor}">{{item.time}}</span>
                              </p>
                          </div>
                        </li>
                      </ul>
                    </div>`,
            });
            Vue.component('x-listAndImg', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                mounted() {
                    this.initAnimation();
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        clearInterval(this.timer);
                        const step = Number(this.option.liHeight) + 42; // 42是各种边框的大小
                        // 计算总共有多少条数据
                        const maxDataLength = this.option.data.length;
                        // 一页显示多少条数据 当前页面高度 / liHeight 取整
                        const onePageCount = Math.round(
                            (this.$refs.listAndImg.offsetHeight || 400) / step,
                        );
                        this.timer = setInterval(() => {
                            if (this.option.isScroll) {
                                if (
                                    this.currentIndex >=
                                    maxDataLength - onePageCount + Math.round(onePageCount / 2)
                                ) {
                                    if (this.$refs.liX !== undefined) {
                                        setTimeout(() => {
                                            this.$refs.liX.style.marginTop = '0px';
                                            this.currentIndex = 0;
                                        }, 1000);
                                    }
                                } else {
                                    const nowStep = this.currentIndex++ * step;
                                    if (this.$refs.liX !== undefined) {
                                        this.$refs.liX.style.marginTop = `-${nowStep}px`;
                                    }
                                }
                            } else if (this.currentIndex < 4) {
                                this.currentIndex++
                            } else {
                                this.currentIndex = 0
                            }

                        }, this.option.Animationtime * 1000);
                    },
                },
                template: `<div ref="listAndImg" class="listAndImg">
                      <ul
                        ref="liX"
                        :style="{
                          opacity:option.opacity,
                          height:option.height
                        }"
                        class="listAndImgUl"
                      >
                        <li
                          v-for="(item,index) in option.data"
                          :key="index"
                          style="line-height:32px"
                          :class="{active:currentIndex===index}"
                          :style="{
                            height:option.liHeight+'px',
                            opacity:option.liOpacity
                          }"
                        >
                          <div  :style="{color:currentIndex===index?option.activeIndexColor:option.indexColor,fontSize:currentIndex===index?option.activeIndexFontSize:option.indexFontSize}">{{index+1}}</div>
                          <div class="listAndImg-content">
                              <p class="list-info" :style="{fontSize:currentIndex===index?option.activeTitleFontSize:option.titleFontSize,color:currentIndex===index?option.activeTitleColor:option.titleColor}">{{item.title}}</p>
                              <p class="listAndImg-from">
                                  <span class="list-organization" :style="{fontSize:currentIndex===index?option.activeFromFontSize:option.fromFontSize,color:currentIndex===index?option.activeFromColor:option.fromColor}">{{item.from}}</span>
                                  <span class="list-time" :style="{fontSize:currentIndex===index?option.activeTimeFontSize:option.timeFontSize,color:currentIndex===index?option.activeTimeColor:option.timeColor}">{{item.time}}</span>
                              </p>
                          </div>
                        </li>
                      </ul>
                    </div>`,
            });
            Vue.component('x-staffMix', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        isResize: null
                    }
                },
                mounted() {
                    this.fixZoom()
                },
                methods: {
                    fixZoom() {
                        this.$refs.staffMix.style.zoom = 1
                        this.$refs.staffMixBody.style.zoom = 1
                        this.$refs.staffMix.style.zoom = this.$refs.staffMix.clientWidth / 400
                        this.$refs.staffMixBody.style.zoom = this.$refs.staffMixBody.clientHeight / 300 / (this.$refs.staffMix.clientWidth / 400)
                    },
                },
                template: `
        <div class="staffMix-container"> 
        <resize-observer @notify="fixZoom" />
          <div class="sn-content" ref="staffMix"> 
          <div class="sn-body" ref="staffMixBody"> 
            <div class="wrap-container"> 
              <div class="person"> 
               <div class="pers person1"></div> 
               <div class="pers person2"></div> 
               <div class="pers person3"></div> 
              </div>
    
              <div class="svgs"> 
               <svg width="244" height="264" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"> 
                <defs> 
                 <linearGradient id="linear" x1="0%" y1="0%" x2="0%" y2="100%"> 
                  <stop offset="0%" style="stop-color:#0a6aff;stop-opacity:0.47"></stop> 
                  <stop offset="40%" style="stop-color:#5cffff;stop-opacity:1"></stop> 
                  <stop offset="100%" style="stop-color:#0a6aff;stop-opacity:1"></stop> 
                 </linearGradient> 
                 <marker id="arrow" markerWidth="10" markerHeight="10" refX="0" refY="3" orient="auto" markerUnits="strokeWidth"> 
                  <path d="M0,0 L0,6 L9,3 z" fill="rgb(11,108,255)"></path> 
                 </marker> 
                </defs> 
                <path d="M134 86C136 86 80 85 77 208" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M136 86C138 86 212 88 204 208" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M136 84C138 84 195 84 206 116" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M134 84C136 84 81 82 58 123" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M132 86C134 86 120 68 93 67" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M134 86C136 86 132 78 134 74C136 69 150 52 150 52" fill="none" stroke="url(#linear)" stroke-opacity="1" marker-end="url(#arrow)"></path> 
                <path d="M134 85C136 85 146 65 183 65" fill="none" fill-opacity="0" stroke="url(#linear)" marker-end="url(#arrow)"></path> 
               </svg> 
              </div>
    
              <div class="svgs"> 
               <div class="text" :class="'per'+index" v-for="(item, index) in option.data" :key="index" :style="{color:option.color,fontSize:option.fontSize}">
                <span>{{ item.name }}</span>
                <span>{{ item.number }}</span>人
               </div> 
              </div>
            </div> 
          </div> 
        </div>   
      </div>`
            })
            Vue.component('x-flashCloud', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: null,
                        number: 0,
                    }
                },
                mounted() {
                    this.fixZoom()
                    let len = 5;
                    this.timer = setInterval(() => {
                        this.number = parseInt(Math.random() * 15, 10);
                        if (len == 0) {
                            len = 5;
                            return this.option.data.sort(() => Math.random() - 0.5);
                        }
                        len--;

                    }, 2000)
                },
                methods: {
                    fixZoom() {
                        this.$refs.flashCloud.style.zoom = 1
                        this.$refs.flashCloudBody.style.zoom = 1
                        this.$refs.flashCloud.style.zoom = this.$refs.flashCloud.clientWidth / 400
                        this.$refs.flashCloudBody.style.zoom = this.$refs.flashCloudBody.clientHeight / 300 / (this.$refs.flashCloud.clientWidth / 400)
                    }
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                template: `<div class="flashCloud-container">
        <resize-observer @notify="fixZoom" />
        <div class="sn-content"  ref="flashCloud">
          <div class="sn-body" ref="flashCloudBody">
            <div class=" cloud">
              <div class="pd-main-left">
                <div class="yun-container">
                  <div class="yun-tree"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                  <div class="line-fs"></div>
                </div>
    
                <div id="yunText" class="yun-text">
                  <div
                    :id="'yunText'+index"
                    :class="{ 'span-flash': number == index }"
                    v-for="(item, index) in option.data"
                    :key="index"
                  >
                    <span :title="item.title" :style="{color:option.color,fontSize:option.fontSize}">{{ item.title }}</span>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>`
            })
            Vue.component('x-sinaRank', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: null,
                        number: 0,
                    }
                },
                mounted() {
                    this.fixZoom()
                    setTimeout(() => {
                        this.number = 0;
                        this.initData();
                    }, 4000)
                },
                methods: {
                    fixZoom() {
                        this.$refs.sinaRank.style.zoom = 1
                        this.$refs.sinaRankBody.style.zoom = 1
                        this.$refs.sinaRank.style.zoom = this.$refs.sinaRank.clientWidth / 450
                        this.$refs.sinaRankBody.style.zoom = this.$refs.sinaRankBody.clientHeight / 450 / (this.$refs.sinaRank.clientWidth / 450)
                    },
                    initData() {
                        this.number = this.number == this.option.data.length ? 0 : this.number;
                        this.timer = setTimeout(() => {
                            this.number++;
                            this.initData();
                        }, this.option.Animationtime * 1000)
                    }
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                template: `  
          <div class="wrap-container sinaRank-container full" ref="sinaRank"> 
            <resize-observer @notify="fixZoom" />
            <div class="pd-main" ref="sinaRankBody"> 
              <div id="chart1" class="chart-1"> 
                <div class="compass"> 
                  <div class="compass-bg-1"></div> 
                  <div class="compass-bg-2"></div> 
                  <div class="compass-bg-3"></div> 
                  <div class="compass-bg-4"></div> 
                  <div class="compass-bg-5"></div> 
                  <div class="compass-bg-6"></div> 
                  <div class="compass-bg-7"></div>
                  <div class="compass-bg-c-1"></div> 
                  <div class="compass-bg-c-2"></div> 
                  <div class="compass-bg-c-3"></div> 
                  <div class="compass-bg-c-4"></div>
                  <div class="compass-text" :class="['compass-text-'+index, {show: number == index}]" v-for="(item, index) in option.data" :key="index">
                    <span>{{option.itemNumTitle}}{{ item.itemNum }}</span>
                    <span>{{option.dataItemTitle}}{{ item.dataItem }}</span>
                    <span>{{option.dataSizeTitle}}{{ item.dataSize }}</span>
                  </div>
                  <div class="compass-number"> 
                    <div :title="Number(Number(index)+1)" :class="['rank-'+Number(Number(index)+1), {szscale: number == index}]" v-for="(item, index) in option.data" :key="index">
                    <span>{{ item.workUnit }}</span>
                    </div>
                  </div> 
                  <div class="line-sx"> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                    <div class="line-fs"></div> 
                  </div>
                </div>
              </div>
            </div>  
          </div>`
            })
            Vue.component('x-dynamicList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    width: {
                        type: Number,
                        default: 400
                    },
                    height: {
                        type: Number,
                        default: 300
                    },
                },
                mounted() {
                    this.fixZoom()
                },
                methods: {
                    fixZoom() {
                        this.$refs.dynamicList.style.zoom = 1
                        this.$refs.dynamicListBody.style.zoom = 1
                        this.$refs.dynamicList.style.zoom = this.$refs.dynamicList.clientWidth / 350
                        this.$refs.dynamicListBody.style.zoom = this.$refs.dynamicListBody.clientHeight / 280 / (this.$refs.dynamicList.clientWidth / 350)
                    }
                },
                template: `
        <div class="wrap-container dynamicList-container full" ref="dynamicList"> 
        <resize-observer @notify="fixZoom" />
        <div class="wrap-container pd-info" ref="dynamicListBody"> 
          <div class="pd-info-center">
            <div class="y-center">
              <div class="info-1-0 animated infinite rotateF"></div>
              <div class="info-1-1 animated infinite rotateF"></div>
              <div class="info-1-2 animated infinite rotate"></div>
              <div class="info-1-3 animated infinite rotate"></div>
              <div class="info-1-4 animated infinite flashPD"></div>
            </div>

            <div class="y-number animated fadeInLeft" :class="'y-number-'+index" v-for="(item,index) in option.data" :key="index">
              <div class="y-number-bg animated infinite rotate"></div>
              <div class="y-number-icon"></div>
              <div class="y-number-text">
                <span :style="{color:option.nameColor,fontSize:option.nameFontSize}">{{item.name}}</span>
                <span :id="'number'+index" class="odometer odometer-theme-digital">
                  <div class="odometer-inside">
                    <span class="odometer-digit">
                      <span class="odometer-digit-inner">
                        <span class="odometer-ribbon">
                          <span class="odometer-ribbon-inner">
                            <span class="odometer-value" :style="{color:option.countColor,fontSize:option.countFontSize}">
                             <count-to :startVal='0' :endVal='item.value' :duration='6000' separator="" />
                            </span>
                          </span>
                        </span>
                      </span>
                    </span>
                  </div>
                </span>
              </div>
            </div>
            
          </div>
        </div> 
    </div>
        `
            })
            Vue.component('x-pyramid', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        totalNum: [],
                        sum: 0,
                    }
                },

                mounted() {
                    this.fixZoom()
                    this.option.data.forEach((v, i) => {
                        this.totalNum.push(v.value);
                    })
                    this.sum = this.totalNum.reduce((prev, next, index, array) => prev + next)
                    this.$nextTick(() => {
                        const tempData = JSON.parse(JSON.stringify(this.option.data))
                        tempData.map((v, i) => {
                            v.color = this.option.color[i];
                            this.getEchart(`chart_${i + 1}`, v);
                        })
                    })

                },
                methods: {
                    fixZoom() {
                        this.$refs.pyramid.style.zoom = 1
                        this.$refs.pyramidBody.style.zoom = 1
                        if (this.$refs.pyramidBody.clientHeight === 0 || this.$refs.pyramid.clientWidth === 0) return;
                        this.$refs.pyramid.style.zoom = this.$refs.pyramid.clientWidth / 720
                        this.$refs.pyramidBody.style.zoom = this.$refs.pyramidBody.clientHeight / 520 / (this.$refs.pyramid.clientWidth / 720)
                    },
                    getEchart(dom, data) {
                        const sum = (Math.round((data.value / this.sum) * 10000) / 100).toFixed(1);
                        const myChart = echarts.init(document.getElementById(dom), null, { renderer: 'canvas' });
                        const option = {
                            color: [data.color, '#333'],
                            series: [{
                                name: '访问来源',
                                type: 'pie',
                                radius: ['92%', '100%'],
                                clockWise: false,
                                avoidLabelOverlap: false,
                                hoverAnimation: false,
                                label: {
                                    normal: {
                                        show: true,
                                        position: 'center',
                                        textStyle: {
                                            fontSize: 14
                                        },
                                        formatter: '{c}%'
                                    }
                                },
                                labelLine: {
                                    show: false
                                },
                                data: [{
                                        value: sum,
                                        name: '',
                                        label: {
                                            normal: {
                                                show: true
                                            }
                                        }
                                    },
                                    {
                                        value: (100 - sum),
                                        name: '',
                                        label: {
                                            normal: {
                                                show: false
                                            }
                                        }
                                    }
                                ]
                            }]
                        };
                        myChart.setOption(option);
                    }
                },
                template: `
        <div class="wrap-container pyramid full" ref="pyramid"> 
         <resize-observer @notify="fixZoom" />
          <div ref="pyramidBody" class="full">
            <div class="back_img3"></div> 
            <div class="back_img"></div> 
            <div class="back_img1"></div> 
            <div class="back_img2"></div>
            <ul :class="{first: index == 0, second: index == 1, third: index == 2, four: index == 3}" v-for="(item, index) in option.data"> 
              <li></li>
              <li></li>
              <li></li> 
              <li></li>
              <li></li>
              <li></li> 
            </ul> 
            <div class="detail" :class="'detail_'+Number(Number(index)+1)" v-for="(item, index) in option.data" :key="index"> 
              <div class="detail_txt" :class="'detail_txt'+Number(Number(index)+1)"> 
                <span class="precent_txt" :class="'precent_txt'+Number(Number(index)+1)"> 
                  <div class="chartsdom" :id="'chart_'+Number(Number(index)+1)"></div> 
                </span>
                <div class="txt_right" :class="'txt_right'+Number(Number(index)+1)"> 
                  <span> 
                    <div class="f_div" :class="{aharrow_up: index == 0 || index == 1, aharrow_down: index == 2 || index == 3}" 
                    :style="{fontSize:option.nameFontSize,color:option.nameColor}">{{ item.name }}</div> 
                    <div class="s_div" :class="'s_div'+Number(Number(index)+1)">{{ item.value }}</div> 
                  </span> 
                </div>
              </div>
              <div class="arrow_contain" :class="'arrow_contain'+Number(Number(index)+1)"> 
                <span class="arrow" :class="'arrow_'+Number(Number(index)+1)"></span> 
              </div>
            </div>
          </div>
      </div>
        `
            })
            Vue.component('x-listStatus', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                created() {
                    if (!this.option.selectStyle.option[2]) {
                        this.option.selectStyle.option.push({ label: '炫酷蓝', value: 'style3' })
                    }
                    console.log(this.option.selectStyle)
                },
                template: `
        <ul class="full listStatus" v-if="option.data.length>0" :class="[{'blackListStaus': option.selectStyle.default === option.selectStyle.option[1].value} ,{'mocListStaus': option.selectStyle.default === option.selectStyle.option[2].value}]" >
          <li v-for="(item,index) in option.data" :key="index" 
          class="ani2"
          :class="{yellow: item.status === 1, green: item.status === 2 , red: item.status === 0, blue: item.status === 3}">
            <h3 :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</h3>
            <div class="listStatus-details" >
              <p :style="{fontSize:option.statusFontSize}"
              :class="{yellowFont: item.status === 1, greenFont: item.status === 2 , redFont: item.status === 0, blueFont: item.status === 3}">
                <i class="el-icon-price-tag" />
                {{item.status===0?'退回':''}} {{item.status===1?'待审':''}}
                {{item.status===2?'通过':''}} {{item.status===3?'已推送':''}}
              </p>
              <p :style="{fontSize:option.nameFontSize,color:option.nameColor}"><i class="el-icon-user-solid"></i>{{item.name}}</p>
              <p :style="{fontSize:option.timeFontSize,color:option.timeColor}"><i class="el-icon-time"></i>{{item.time}}</p>
              <div></div>
            </div>
          </li>
        <ul>
        `
            })
            Vue.component('x-listAndDetails', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <ul class="listAndDetails full">
                      <li v-for="(item,index) in option.data" >
                       <span :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</span>
                       <div>
                          <span :style="{fontSize:option.fromFontSize,color:option.fromColor}"><i class="el-icon-data-line"/>{{item.from}}</span>
                          <span :style="{fontSize:option.authorFontSize,color:option.authorColor}"><i class="el-icon-user-solid"/>{{item.author}}</span>
                          <span :style="{fontSize:option.timeFontSize,color:option.timeColor}"><i class="el-icon-time"/>{{item.time}}</span>
                       </div>
                       <span :style="{fontSize:option.detailsFontSize,color:option.detailsColor}">{{item.details}}</span>
                      </li>
                    </ul>`,
            });
            Vue.component('x-noIndexList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                created() {
                    if (!this.option.selectBorderStyle) {
                        this.option.selectBorderStyle = {
                            default: 'solid',
                            option: [{ label: '实线', value: 'solid' }, { label: '虚线', value: 'dashed' }]
                        }
                    }
                },
                mounted() {
                    setTimeout(() => {
                        this.initAnimation();
                    }, 500)
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        clearInterval(this.timer);
                        if (!this.option.data) return;
                        let step = 100
                        try {
                            step = document.getElementsByClassName('noIndexList')[0].children[0].offsetHeight;
                            console.log(step)
                        } catch (err) {}
                        const that = this;
                        // 计算总共有多少条数据
                        const maxDataLength = this.option.data.length;
                        // 一页显示多少条数据 当前页面高度 / liHeight 取整
                        const onePageCount = Math.round(
                            (this.$refs.listContent.offsetHeight || 400) / step,
                        );
                        that.timer = setInterval(() => {
                            if (
                                that.currentIndex >=
                                maxDataLength - onePageCount + Math.round(onePageCount / 2)
                            ) {
                                if (that.$refs.liX !== undefined) {
                                    setTimeout(() => {
                                        that.$refs.liX.style.marginTop = '0px';
                                        that.currentIndex = 0;
                                    }, 1000);
                                }
                            } else {
                                const nowStep = (++that.currentIndex) * step;
                                if (that.$refs.liX !== undefined) {
                                    that.$refs.liX.style.marginTop = `-${nowStep + 10}px`; // 10 为边框
                                }
                            }
                        }, this.option.Animationtime * 1000);
                    },
                },
                template: `<div ref="listContent" class="listContent">
                      <ul
                        ref="liX"
                        :style="{
                          opacity:option.opacity,
                          height:option.height
                        }"
                        class="noIndexList"
                      >
                        <li
                          v-for="(item,index) in option.data"
                          :key="index"
                          :style="{
                            height:option.liHeight+'px',
                            opacity:option.liOpacity,
                            backgroundColor:currentIndex===index? option.activeBgColor:''
                          }"
                        >
                          <div  v-if="option.selectStyle.default === option.selectStyle.option[0].value" class="list-content" :style="{borderBottom:'1px '+option.selectBorderStyle.default+' '+option.borderColor}" style="box-sizing:border-box">
                              <p class="list-info" :style="{fontSize: currentIndex===index ? option.activeFontSize: option.titleFontSize , color:currentIndex===index ? option.activeTitleColor: option.titleColor}">{{item.title}}</p>
                              <p class="list-from">
                                  <span class="list-organization":style="{fontSize:option.leftFontSize,color:currentIndex===index ? option.activeFromColor: option.fromColor}">{{item.from}}</span>
                                  <span class="list-time" :style="{fontSize:option.rightFontSize,color:currentIndex===index ? option.activeTimeColor: option.timeColor}">{{item.time}}</span>
                              </p>
                          </div>
                          <div  v-else-if="option.selectStyle.default === option.selectStyle.option[1].value" class="hor-list-content">
                          <p :style="{fontSize: currentIndex===index ? option.activeFontSize: option.titleFontSize , color:currentIndex===index ? option.activeTitleColor: option.titleColor}">{{item.title}}</p>
                          <p :style="{fontSize:option.leftFontSize,color:currentIndex===index ? option.activeFromColor: option.fromColor}">{{item.from}}</span>
                          <p :style="{fontSize:option.rightFontSize,color:currentIndex===index ? option.activeTimeColor: option.timeColor}">{{item.time}}</span>
                          </div>
                        </li>
                      </ul>
                    </div>`,
            });
            Vue.component('x-noAnimation', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <ul class="noAnimation-lists full">
                      <li v-for="(item,index) in option.data" v-if="index<option.maxLength"  :style="{background:index<3&& option.bgColor}">
                      <template  v-if="option.selectStyle.default === option.selectStyle.option[0].value">
                        <span :style="{color:option.indexColor}">{{index+1}}</span>
                        <div  :class="{noAnimationFirst:index==0,noAnimationSecond:index==1,noAnimationThird:index==2}" class="noAnimation-lists-img">
                          <img :src="item.avatar" alt="avatar">
                        </div>
                        <div class="noAnimation-body">
                        <div>
                          <span :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</span>
                          <span :style="{color:index===0?option.firstCountColor:(index===1?option.secondCountColor:(index===2?option.thirdCountColor:option.countColor)) ,fontSize:option.countFontSize}">{{item.count}}</span>
                        </div>
                        <div>
                          <span :style="{fontSize:option.descriptionFontSize,color:option.descriptionColor}">{{item.description}}</span>
                          <span :style="{color:option.publishCountColor ,fontSize:option.publishCountFontSize}">发布{{item.publishCount}}次</span>
                        </div>
                     <div>
                     </template>
                    <template  v-if="option.selectStyle.default === option.selectStyle.option[1].value">
                       <span :style="{color:option.indexColor}">{{index+1}}</span>
                       <span :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</span>
                       <span :style="{color:index===0?option.firstCountColor:(index===1?option.secondCountColor:(index===2?option.thirdCountColor:option.countColor)) ,fontSize:option.leftFontSize}">{{item.count}}</span>
                    </template>
                       </li>
                    </ul>`,
            });

            Vue.component('x-capsuleList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                watch: {
                    'option.data': {
                        handler() {
                            this.init()
                        },
                    },
                },
                data() {
                    return {
                        sum: 0,
                        data: []
                    }
                },
                mounted() {
                    this.init()
                },
                methods: {
                    init() {
                        this.sum = 0
                        this.data = JSON.parse(JSON.stringify(this.option.data))
                        this.data.sort((a, b) => {
                            return b.count - a.count
                        })
                        this.data.map(item => {
                            this.sum += Number(item.count) || 0
                        })
                    },
                    getWidth(count) {
                        return `calc(${count / this.sum * 100}% + ${this.option.avatarWidth}px)`
                    },
                    getColorStops(index) {
                        if (index < 3) {
                            return `linear-gradient(90deg, ${this.option.color[index * 2]} 0%, ${this.option.color[index * 2 + 1]})`
                        }
                        return `linear-gradient(90deg, ${this.option.color[6]} 0%, ${this.option.color[7]})`
                    },
                },
                template: ` <ul class="capsuleList full">
                      <li v-for="(item,index) in data">
                        <div :style="{width:getWidth(item.count)}">
                           <el-avatar :src="item.img" :style="{minWidth:option.avatarWidth,minHeight:option.avatarWidth}"/>
                           <div :style="{background:getColorStops(index),height:option.capsuleHeight}"></div>
                        </div>
                        <div><span :style="{fontSize:option.fontSize,color:option.fontColor}">{{item.count}}</span></div>
                      </li>
                    </ul>`,
            });
            Vue.component('x-listAnimation', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                watch: {
                    'option.isHaveHeader': {
                        handler(value) {
                            const top = this.$refs.listAnimationActiveImage.style.top.split('px')[0]
                            if (value) {
                                this.$refs.listAnimationActiveImage.style.top = 100
                            } else {
                                this.$refs.listAnimationActiveImage.style.top = 0
                            }
                            clearInterval(this.timer)
                            this.currentIndex = 0
                            this.initAnimation()
                        }
                    }
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                mounted() {
                    setTimeout(() => {
                        this.initAnimation();
                    }, 100);
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        if (this.timer) {
                            clearInterval(this.timer)
                            this.timer = null;
                        }
                        const len = this.option.data.length;
                        if (len == 0) {
                            return;
                        }
                        this.$nextTick(() => {
                            const step = document.querySelector('.listAnimation-table-body>li').offsetHeight + 25

                            const firstTop = document.querySelector('.listAnimation-table-body>li').offsetTop - (this.option.selectStyle.default === this.option.selectStyle.option[0].value ? 10 : 30)
                            this.$refs.listAnimationActiveImage.style.top = firstTop
                                // const step = height
                                // const stepHeader = this.option.isHaveHeader ? firstTop : (this.option.selectStyle.default === this.option.selectStyle.option[0].value ? 0 : -30)
                            this.timer = setInterval(() => {
                                if (this.currentIndex == len - 1) {
                                    this.currentIndex = 0;
                                } else {
                                    this.currentIndex++
                                }
                                this.$refs.listAnimationActiveImage.style.top = firstTop + this.currentIndex * step
                            }, this.option.Animationtime * 1000)
                        })

                    },
                    getBorder() {
                        if (this.option.indexIsHaveBorder) {
                            return `2px dotted ${this.option.borderColor}`
                        }
                    },
                    getIndexBg(index) {
                        // 序号背景框
                        if (this.option.indexIsHaveBg) {
                            return `url('${vm.staticUrl}/image/listAnimation/sort${index > 3 ? 0 : index}.png') center no-repeat`
                        }
                    },
                    handleResize() {
                        this.$refs.listAnimationActiveImage.style.height = document.querySelector('.listAnimation-table-body>li').offsetHeight + (this.option.selectStyle.default === this.option.selectStyle.option[0].value ? 15 : 55)
                        clearInterval(this.timer)
                        this.currentIndex = 0
                        this.initAnimation()
                    }
                },
                template: `  	<div class="listAnimation" v-if="option.selectStyle.default === option.selectStyle.option[0].value">
                       <resize-observer @notify="handleResize" />
                        <div v-if="option.isHaveHeader"  class="listAnimation-table-head" :style="{fontSize:option.fontSize,color:option.headerFontColor,background:option.headerBackgroundColor}">
                        <p v-if="option.isHaveIndex" style="width:15%;">排名</p>
                          <p :class="'p'+ Number(index+1)" v-for="(item,index) in option.header" :key="index" :style="{width:item.width}">{{item.label}}</p>
                        </div>
                        <ul class="listAnimation-table-body">
                        <img v-if="option.isHaveActiveImg" class="activeImage" ref="listAnimationActiveImage" :src="vm.staticUrl+'/image/listAnimationBg.png'" />
                          <li v-for="(item,index) in option.data" :key="index" :class="{'listAnimation-isHaveBg':option.isHaveBg}"
                          :style="{fontSize:currentIndex === index ?option.activeFontSize: option.fontSize,color:option.detailsFontColor,height:option.height,backgroundColor:option.isHaveBg?option.bgColor:null}">
                          <div class="index"  v-if="option.isHaveIndex"> <p :style="{border:getBorder(),background:getIndexBg(index)}">{{index+1}} <img v-if="option.isHaveIndexImg" :src="vm.staticUrl+'/image/listAnimation/top'+(index>2?2:index)+'.png'"/></p></div>
                            <p v-for="(headrItem,headerIndex) in option.header" :key="headerIndex"  :style="{width:headrItem.width}">{{item['data'+headerIndex]}}</p>
                          </li>
                        </ul>
                      </div>

                      <div  class="listAnimation listAnimationStyle2" v-else-if="option.selectStyle.default === option.selectStyle.option[1].value">
                       <resize-observer @notify="handleResize" />
                        <div v-if="option.isHaveHeader"  class="listAnimation-table-head" :style="{fontSize:option.fontSize,color:option.headerFontColor,background:option.headerBackgroundColor}">
                        <p v-if="option.isHaveIndex" style="width:10%;">序号</p>
                          <p :class="'p'+ Number(index+1)" v-for="(item,index) in option.header" :key="index" :style="{width:item.width}">{{item.label}}</p>
                        </div>
                        <ul class="listAnimation-table-body">
                        <img v-if="option.isHaveActiveImg" class="activeImage" ref="listAnimationActiveImage" :src="vm.staticUrl+'/image/rwd-3.png'" />
                          <li v-for="(item,index) in option.data" :key="index" :style="{fontSize:currentIndex === index ?option.activeFontSize: option.fontSize,color:option.detailsFontColor ,height:option.height}">
                          <div class="index"  v-if="option.isHaveIndex"> <p>{{index+1}}</p></div>
                            <p v-for="(headrItem,headerIndex) in option.header" :key="headerIndex"  :style="{width:headrItem.width}">{{item['data'+headerIndex]}}</p>
                            
                          </li>
                        </ul>
                      </div>
                      `,
            });
            Vue.component('x-topList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `<ul class="topList">
                    <li v-for="(item,index) in option.data" :key="index" :style="{fontSize:option.fontSize,backgroundColor:index===0?option.firstBgColor:(index===1?option.secondBgColor:option.thirdBgColor),height:option.height,marginBottom:option.marginBottom}">
                      <p :style="{color:option.indexColor}">{{index+1}}</p>
                      <p :style="{color:option.titleColor}">{{item.title}}</p>
                      <p :style="{color:option.countColor}">{{item.count}}</p>
                    </li>
                  </ul>`
            })

            Vue.component('x-checkList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                methods: {
                    getCheckColor(status) {
                        const index = this.option.checkColorList.findIndex(item => {
                            return item.label === status
                        })
                        return index != -1 && this.option.checkColorList[index].color
                    }
                },
                template: `<ul class="checkList">
                    <li v-for="(item,index) in option.data" :key="index">
                      <div>
                        <p :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                        <p :style="{fontSize:option.statusFontSize,backgroundColor:getCheckColor(item.status),color:option.statusColor}">{{item.status}}</p>
                      </div>
                      <div>
                        <p :style="{fontSize:option.leftFontSize,color:option.authorColor}"><i class="el-icon-user-solid" />{{item.author}}</p>
                        <p :style="{fontSize:option.rightFontSize,color:option.timeColor}"><i class="el-icon-time" />{{item.time}}</p>
                      </div>
                    </li>
                  </ul>`
            })
            Vue.component('x-cardList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                methods: {

                },
                template: `<ul class="cardList">
                    <li v-for="(item,index) in option.data" :key="index">
                        <p :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                      <div>
                        <p :style="{fontSize:option.rightFontSize,color:option.timeColor}"><i class="el-icon-time" />{{item.time}}</p>
                        <p :style="{fontSize:option.leftFontSize,color:option.authorColor}"><i class="el-icon-user-solid" />{{item.author}}</p>
                        <p :style="{fontSize:option.statusFontSize,color:option.statusColor}"><i class="el-icon-wind-power" />{{item.status}}</p>
                      </div>
                    </li>
                  </ul>`
            })
            Vue.component('x-dataContainer', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        dialogVisible: false,
                        playUrl: null
                    }
                },
                methods: {
                    playVideo(url, type) {
                        if (type !== 'video') return;
                        this.playUrl = url
                        this.dialogVisible = true
                    },
                    closeVideo() {
                        this.dialogVisible = false
                        this.playUrl = null
                    }
                },
                template: `<div>
                  <ul class="dataContainer">
                    <li v-for="(item,index) in option.data" :key="index" @click="playVideo(item.playUrl,item.type)">
                      <img v-if="item.type === 'video'" class ="video" :src="vm.staticUrl+'/image/play.png'"  />
                      <img v-else-if="item.type === 'voice'" class ="voice" :src="vm.staticUrl+'/image/voice.png'" />
                      <img :src="item.url" />
                      <div>
                        <p :style="{fontSize:option.titleFontSize,color:option.color[0]}">{{item.title}}</p>
                        <p :style="{fontSize:option.descriptionFontSize,color:option.color[1]}">{{item.description}}</p>
                      </div>
                    </li>
                  </ul>
                  <el-dialog
                    :visible.sync="dialogVisible"
                    width="30%"
                    fullscreen
                    :before-close="closeVideo"
                    :modal="false">
                    <video id="dataContainerVideo"  :src="playUrl" autoplay="autoplay" controls="controls"
                   >无效地址</video>
                  </el-dialog>
                  </div>`
            })
     
            Vue.component('x-tvShow', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        nowSelect: false,
                    }
                },
                template: `<div id="container" class="section">
                    <div class="min-title">
                      <h1 v-cloak onclick="webConfig.turnMax('MaxTv.html')">{{title}}</h1>
                    </div>
                    <div class="tv-select">
                      <select v-if="listData.length>0" v-model="thisUrl">
                        <option v-for="item in listData" :value="item" v-cloak>{{item.item1}}</option>
                      </select>
                    </div>
                    <div class="section play-box">
                      <div>
                        <div id="playBox"></div>
                      </div>
                    </div>
                  </div>`
            })
            Vue.component('x-listNoHeader', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                mounted() {
                    this.initAnimation();
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        if (this.timer) {
                            clearInterval(this.timer)
                            this.timer = null;
                        }
                        const len = this.option.data.length;
                        if (len == 0) {
                            return;
                        }

                        this.timer = setInterval(() => {
                            if (this.currentIndex == len - 1) {
                                this.currentIndex = 0;
                                this.$refs.listNoHeaderUl.style.willChange = 'none'
                                this.$refs.listNoHeaderUl.style.transform = `translateY(0px)`
                            } else {
                                // if (this.currentIndex > 3) {
                                const liHeight = this.$refs.listNoHeaderUl.children[0].offsetHeight
                                this.$refs.listNoHeaderUl.style.willChange = 'transform'
                                this.$refs.listNoHeaderUl.style.transform = `translateY(-${(this.currentIndex - (this.option.startScroll - 2)) * liHeight}px)`
                                    // }
                                this.currentIndex++
                            }

                            // this.$refs.listAnimationActiveImage.style.top = 100 + this.currentIndex * 131
                        }, this.option.Animationtime * 1000)
                    },
                },
                template: `  	<div class="listNoHeader">
                        <ul class="listNoHeader-table-body" ref="listNoHeaderUl">
                          <li v-for="(item,index) in option.data" :class="{active:currentIndex === index}" :key="index"
                           :style="{fontSize:option.fontSize}">
                            <p class="p0" v-if="currentIndex === index" :style="{fontSize:option.activeFontSize,color:option.activeIndexColor,left:'-2%',top:'-6%'}">{{index<9?'0'+(index+1) :index+1}}</p>
                            <p class="p0" :style="{color:option.indexColor}" v-else>{{index<9?'0'+(index+1) :index+1}}</p>
                            <p class="p1"  v-if="currentIndex === index"  :style="{fontSize:option.activeFontSize,color:option.activeTitleColor}">{{item.title||"无"}}</p>
                            <p class="p1" v-else :style="{color:option.titleColor}">{{item.title||"无"}}</p>
                            <p class="p2"  v-if="currentIndex === index"  :style="{fontSize:option.activeFontSize,color:option.activeTimeColor}"><i class="el-icon-user-solid" />{{item.time||"无"}}</p>
                            <p class="p2"  v-else  :style="{color:option.timeColor}"><i class="el-icon-user-solid" />{{item.time||"无"}}</p>
                            <p class="p3" v-if="currentIndex === index"  :style="{fontSize:option.activeFontSize,color:option.activeAuthorColor}"><i class="el-icon-view"/>{{item.author||"无"}}</p>
                            <p class="p3" v-else :style="{color:option.authorColor}"><i class="el-icon-view"/>{{item.author||"无"}}</p>
                          </li>
                        </ul
                      </div>`,
            });

            Vue.component('x-tab', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    config: { // 蓝图配置
                        type: Array,
                        default: () => {
                            return [];
                        },
                    },
                    link: { // 绑定的组件id和key !!!!!!!!不能用multLink作为props参数 否则预览页面会监听不到 具体原因不详
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: () => {
                            return null;
                        }
                    }

                },
                data() {
                    return {
                        timer: null,
                        currentIndex: 0,
                    }
                },
                watch: {
                    config: {
                        handler(newValue) {
                            this.changeBluePrintConfig(newValue)
                        }
                    }
                },
                mounted() {
                    this.init()
                },
                beforeDestroy() {
                    clearInterval(this.timer)
                },
                methods: {
                    changeBluePrintConfig(config) {
                        vm.handlerBluePrintConfig(config, this.option.data[this.currentIndex])
                    },
                    init() {
                        this.action()
                        this.changeImg(0)
                    },
                    action() {
                        if (this.timer) {
                            clearInterval(this.timer)
                        }
                        this.timer = setInterval(() => {
                            if (this.currentIndex < this.option.data.length - 1) {
                                this.changeImg(this.currentIndex + 1)
                                this.currentIndex++
                            } else {
                                this.changeImg(0)
                                this.currentIndex = 0
                            }
                            this.changeBluePrintConfig(this.config)
                        }, this.option.Animationtime * 1000);
                    },
                    changeTab(index) {
                        if (this.timer) {
                            clearInterval(this.timer)
                        }
                        this.currentIndex = index
                        this.changeBluePrintConfig(this.config)
                        this.changeImg(index)
                        this.action()
                    },
                    changeImg(index) {
                        vm.changeLinkTempalte(this.link, this.option.data[index].value)
                    },

                },
                template: `<template v-if="option.selectStyle.default === option.selectStyle.option[0].value">
                    <div class="tab">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" 
                      :style="{fontSize:option.fontSize,color:currentIndex === index?option.activeTitleColor:option.titleColor,background:currentIndex === index? option.activeBgColor:option.bgColor}"
                      :key="index">{{item.name}}</p>
                  </div>
                  </template>

                  <template v-else-if="option.selectStyle.default === option.selectStyle.option[1].value">
                    <div class="tabVer">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" 
                      :style="{fontSize:option.fontSize,color:currentIndex === index?option.activeTitleColor:option.titleColor,background:currentIndex === index? option.activeBgColor:option.bgColor}"
                      :key="index">{{item.name}}</p>
                  </div>
                  </template>

                  <template v-else-if="option.selectStyle.default === option.selectStyle.option[2].value || option.selectStyle.default === option.selectStyle.option[3].value">
                  <div class="tabVerImg" :class="{blackTabVerImg: option.selectStyle.default === option.selectStyle.option[3].value}">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" 
                      :style="{fontSize:option.fontSize,color:currentIndex === index?option.activeTitleColor:option.titleColor}"
                      :key="index">{{item.name}}</p>
                  </div>
                  </template>
                  
                  <template v-else-if="option.selectStyle.default === option.selectStyle.option[4].value">
                    <div class="tab tab-anji">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" 
                      :style="{fontSize:option.fontSize,color:currentIndex === index?option.activeTitleColor:option.titleColor}"
                      :key="index">{{item.name}}</p>
                  </div>
                  </template>
                  
                  <template v-else-if="option.selectStyle.default === option.selectStyle.option[5].value">
                    <div class="tab tab-data">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" 
                      :style="{fontSize:option.fontSize,color:currentIndex === index?option.activeTitleColor:option.titleColor}"
                      :key="index">{{item.name}}</p>
                  </div>
                  </template>
                  `,
            });
            Vue.component('x-tab1', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    config: { // 蓝图配置
                        type: Array,
                        default: () => {
                            return [];
                        },
                    },
                    link: { // 绑定的组件id和key
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },

                data() {
                    return {
                        timer: null,
                        currentIndex: 0,
                    }
                },
                mounted() {
                    vm.selectTab = this.option.data[this.currentIndex].value
                    this.init()
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                watch: {
                    config: {
                        handler(newValue) {
                            this.changeBluePrintConfig(newValue)
                        }
                    }
                },
                methods: {
                    changeBluePrintConfig(config) {
                        vm.handlerBluePrintConfig(config, this.option.data[this.currentIndex])
                    },
                    init() {
                        this.$refs.tab1.style.backgroundImage = `url('http://mch.dehong.gov.cn:19207/mhq-screen/new-reception/static/imgs/top/item1.png')`
                        this.action()
                    },
                    action() {
                        if (this.timer) {
                            clearInterval(this.timer)
                        }
                        this.changeImg(this.currentIndex)
                        this.timer = setInterval(() => {
                            if (this.currentIndex < this.option.data.length - 1) {
                                this.changeImg(this.currentIndex + 1)
                                this.currentIndex++
                            } else {
                                this.changeImg(0)
                                this.currentIndex = 0
                            }
                            this.changeBluePrintConfig(this.config)
                        }, this.option.Animationtime * 1000);
                    },
                    changeTab(index) {
                        if (this.timer) {
                            clearInterval(this.timer)
                        }
                        this.currentIndex = index
                        this.changeBluePrintConfig(this.config)
                        this.changeImg(index)
                        this.action()
                    },
                    changeImg(index) {
                        vm.changeLinkTempalte(this.link, this.option.data[index].value)
                            // vm.selectTab = this.option.data[index].value
                        this.$nextTick(() => {
                            this.$refs.tab1.style.backgroundImage = `url('http://mch.dehong.gov.cn:19207/mhq-screen/new-reception/static/imgs/top/item${index + 1}.png')`
                        })
                    }
                },
                template: `<div class="tab1" ref="tab1">
                      <p v-for="(item,index) in option.data" @click="changeTab(index)" :class="{active:currentIndex === index}" :key="index"
                      :style="{fontSize:option.fontSize,color:option.titleColor}">{{item.name}}</p>
                    </div>
                  </div>`,
            });
            Vue.component('x-pagination', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    config: { // 蓝图配置
                        type: Array,
                        default: () => {
                            return [];
                        },
                    },
                    link: { // 绑定的组件id和key
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                watch: {
                    'option.total': {
                        handler() {
                            this.init()
                        }
                    },
                    'option.pageSize': {
                        handler() {
                            this.init()
                        }
                    },
                    config: {
                        handler(newValue) {
                            this.changeBluePrintConfig(newValue)
                        }
                    }
                },
                data() {
                    return {
                        timer: null,
                        currentPage: 0,
                        totalPage: 0
                    }
                },
                mounted() {
                    this.init()
                },
                methods: {
                    changeBluePrintConfig(config) {
                        vm.handlerBluePrintConfig(config, this.currentPage)
                    },
                    init() {
                        const { pageSize, total } = this.option
                        this.totalPage = Math.ceil(total / pageSize)
                    },
                    changePage(index) {
                        this.changeBluePrintConfig(this.config)
                        vm.changeLinkTempalte(this.link, index + 1)
                        this.currentPage = index
                    }
                },
                template: `<ul class="pagination full" >
                      <li  :style="{backgroundColor:(currentPage == index)?option.activeBgColor:option.bgColor}" :class="{active:currentPage === index}" v-for="(item,index) in totalPage" :key="index" @click="changePage(index)"/>
                  </ul>`,
            });
            Vue.component('x-sigleList', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        timer: '',
                        currentIndex: 0,
                    };
                },
                mounted() {
                    this.initAnimation();
                },
                beforeDestroy() {
                    clearInterval(this.timer);
                },
                methods: {
                    initAnimation() {
                        clearInterval(this.timer);
                        const step = Number(this.option.liHeight) + 42; // 42是各种边框的大小
                        const that = this;
                        // 计算总共有多少条数据
                        const maxDataLength = this.option.data.length;
                        // 一页显示多少条数据 当前页面高度 / liHeight 取整
                        const onePageCount = Math.round(
                            (this.$refs.sigleListContent.offsetHeight || 400) / step,
                        );
                        that.timer = setInterval(() => {
                            if (
                                that.currentIndex >=
                                maxDataLength - onePageCount + Math.round(onePageCount / 2)
                            ) {
                                if (that.$refs.sigleList !== undefined) {
                                    setTimeout(() => {
                                        that.$refs.sigleList.style.marginTop = '0px';
                                        that.currentIndex = 0;
                                    }, 1000);
                                }
                            } else {
                                const nowStep = that.currentIndex++ * step;
                                if (that.$refs.sigleList !== undefined) {
                                    that.$refs.sigleList.style.marginTop = `-${nowStep}px`;
                                }
                            }
                        }, this.option.Animationtime * 1000);
                    },
                },
                template: `  <div ref="sigleListContent" class="full sigleListContent">
                      <ul class="sigleList" ref="sigleList">
                        <li v-for="(item,index) in option.data"   
                        :style="{
                          height:option.liHeight+'px',
                        }">
                            <span :style="{fontSize:option.indexFontSize,color:option.indexColor}">NO.{{(index+1)}}</span>
                            <h3 :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</h3>
                            <h4 :style="{fontSize:option.countFontSize,color:option.countColor}">{{item.count}}</h4>
                        </li>
                    </ul></div>`,
            });

            // text
            Vue.component('x-text', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <p
                  :style="{
                    justifyContent:option.selectPosition&&option.selectPosition.default||'center',
                    fontSize:option.fontSize+'px',
                    color:option.color,
                    fontFamily:option.fontFamily|| option.selectFontFamily.default,
                    fontStyle:option.fontStyle,
                    fontWeight:option.fontWeight}"
                  class="baseCss"
                >
                  <a
                    v-if="option.isHref"
                    :href="option.href"
                    :target="option.target"
                  > {{ option.data }}
                  </a>
                  <span v-else>{{ option.data }}</span>
                </p>`,
            });
            Vue.component('x-number', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        colorStops: `linear-gradient(to bottom, ${this.option.color[0]} 0%, ${this.option.color[1]})`,
                    }
                },
                computed: {
                    isFirstZeroIndex() {
                        return this.option.data.length - Number(this.option.data).toString().length // 第一次出现0的位置
                    }
                },
                template: `<ul class="x_number">
                      <li v-for="(item,index) in option.data" :style="{background:colorStops,fontSize:option.fontSize}" :ref="item" :class="{'active':index<isFirstZeroIndex}" :key="item">
                      <count-to :startVal='0' :endVal='item' :duration='6000' separator="" />
                      </li>
                    </ul>`,
            });
            Vue.component('x-datePicker', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    config: { // 蓝图配置
                        type: Array,
                        default: () => {
                            return [];
                        },
                    },
                    link: { // 绑定的组件id和key
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        time: [new Date(new Date() - 3 * 90 * 8 * 3600 * 1000), new Date()]
                    }
                },
                mounted() {
                    vm.changeLinkTempalte(this.link, [vm.getTime(90), vm.getTime(0)])
                },
                watch: {
                    time: {
                        handler(newVal) {
                            this.changeBluePrintConfig(this.config, newVal)
                            vm.changeLinkTempalte(this.link, newVal)
                        }
                    },
                    config: {
                        handler(newValue) {
                            this.changeBluePrintConfig(newValue, this.time)
                        }
                    }
                },
                methods: {
                    changeBluePrintConfig(config, data) {
                        vm.handlerBluePrintConfig(config, data)
                    },
                },

                template: `<el-date-picker
                        class="full datePicker"
                        v-model="time"
                        type="daterange"
                        :clearable="false"
                        :format="option.format"
                        :range-separator="option.rangeSeparator"
                        :value-format="option.valueFormat"
                        start-placeholder="开始日期"
                        end-placeholder="结束日期">
                      </el-date-picker>
                    `,
            });
            Vue.component('x-dropDown', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    config: { // 蓝图配置
                        type: Array,
                        default: () => {
                            return [];
                        },
                    },
                    link: { // 绑定的组件id和key !!!!!!!!不能用multLink作为props参数 否则预览页面会监听不到 具体原因不详
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                watch: {
                    config: {
                        handler(newValue) {
                            this.changeBluePrintConfig(newValue, this.select)
                        }
                    }
                },
                data() {
                    return {
                        select: null,
                        currentIndex: 0,
                    }
                },
                mounted() {
                    this.select = this.option.data[0].name
                },
                methods: {
                    changeBluePrintConfig(config, data) {
                        vm.handlerBluePrintConfig(config, data)
                    },
                    selectItem(e) {
                        this.changeBluePrintConfig(this.config, this.select)
                        vm.changeLinkTempalte(this.link, this.select)
                    }
                },

                template: `<el-dropdown>
                    <span class="el-dropdown-link">
                      {{select}}<i class="el-icon-arrow-down el-icon--right"></i>
                    </span>
                    <el-dropdown-menu slot="dropdown" >
                      <el-dropdown-item v-for="(item,index) in option.data" :key="index"
                       @click.native="selectItem(item.value)">{{item.name}}</el-dropdown-item>
                    </el-dropdown-menu>
                  </el-dropdown>
                    `,
            });
            Vue.component('x-dashBoardImg', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `
        <div class="dash-board-img full" :class="{blackDashBoard: option.selectStyle.default === option.selectStyle.option[1].value}" >
          <div class="right-side-top">
            <div class="today">
            </div>
          </div>
          <div class="right-side-bottom"></div>
        </div>
        `
            })
            Vue.component('x-rotateEarth', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `
          <div class="rotateEarth full">
            <div class="map1"></div>
            <div class="map2"></div>
            <div class="map3"></div>
         </div>
        `
            })
            Vue.component('x-tag', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `<el-tag 
                    :type="option.selectType.default"
                    :closable="option.closable"
                    :size="option.size"
                    :effect="option.selectEffect.default"
                    :hit='option.hit'
                    :disable-transitions="option.disableTransitions"
                    :color="option.color"
                    >
                   {{option.data}}</el-tag>`,
            });
            Vue.component('x-avatar', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `<el-avatar 
                  class="full"
                  :shape="option.selectShape.default" 
                  :src="option.src"
                  :icon="option.icon"
                  :fit="option.selectFit.default"
                  :alt="option.alt">
                  {{option.imgText}}
                  </el-avatar>`,
            });
            Vue.component('x-image', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <el-image
                          :src="option.src"
                          :fit="option.selectFit.default"
                          :alt="option.alt"
                          class="full"
                          >
                            <div slot="placeholder" v-if="option.isloading" class="image-slot">
                               加载中<span class="dot">...</span>
                           </div>
                           <div slot="error" v-if="option.isShowError" class="image-slot">
                              <i class="el-icon-picture-outline"></i>
                          </div>
                          </el-image>`,
            });
            Vue.component('x-icon', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `<i :class="option.class" :style="{fontSize:option.size+'px',color:option.color[0]}" class="full"></i>`,
            });
            Vue.component('x-video', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `
        <video
          id="my-player"
          class="video-js full vjs-big-play-centered"
          controls
          :loop="option.loop"
          :autoplay="option.autoplay"
          :autoSetup="false"
          preload="auto"
          data-setup='{}'>
        <source :src="option.data" type="video/mp4"></source>
        <p class="vjs-no-js">
          To view this video please enable JavaScript, and consider upgrading to a
          web browser that
          <a href="https://videojs.com/html5-video-support/" target="_blank">
            supports HTML5 video
          </a>
        </p>
       </video>
        `,
            });
            Vue.component('x-bubble', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: `<div class="bubble" :style="'background-image:url('+option.src+')' ">  
                      <p v-cloak :style="{fontSize:option.nameFontSize,color:option.nameColor}">{{option.data.name}}</p>
                      <p v-cloak :style="{fontSize:option.countFontSize,color:option.countColor}">{{option.data.count}}</p>
                    </div>
                  </div>`
            });
            Vue.component(`x-stepsHor`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <el-steps direction="horizontal" class="steps"  :active="option.nowStep" :align-center="true" :process-status="option.selectNowStatus.default">
                      <el-step v-for="item in option.data" :key="item" >
                        <p class="ellipses" slot="title" :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                        <div slot="description" style="padding-right:10%">
                          <p :style="{fontSize:option.leftFontSize,color:option.leftColor}">{{item.left}}</p>
                          <p :style="{fontSize:option.rightFontSize,color:option.rightColor}">{{item.right}}</p>
                        </div>
                      </el-step>
                    </el-steps>`,
            });
            Vue.component(`x-steps`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <el-steps direction="vertical" class="steps"  :active="option.nowStep" :align-center="true" :process-status="option.selectNowStatus.default">
                      <el-step v-for="item in option.data" :key="item">
                        <p class="ellipses" slot="title" :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                        <div slot="description" style="padding-right:10%">
                          <span :style="{fontSize:option.leftFontSize,color:option.leftColor}">{{item.left}}</span>
                          <span :style="{fontSize:option.rightFontSize,color:option.rightColor,float:'right'}">{{item.right}}</span>
                        </div>
                      </el-step>
                    </el-steps>`,
            });

            Vue.component(`x-iframe`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                template: ` <iframe
                      class="full"
                      :style="{pointerEvents: vm.origin?'none': 'auto'}"
                      :src="option.url"
                      frameBorder="0"
                    />`,
            });

            Vue.component(`x-progress`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                methods: {
                    getBorder() {
                        return `1px dotted ${this.option.borderColor}`
                    }
                },
                template: `<ul class="progress full" :style="{backgroundColor:option.backgroundColor}">
                      <p :style="{fontSize:option.titleFontSize,color:option.titleColor,border:getBorder()}">{{option.data.title}}</p>
                      <div>
                        <li v-for="(item,index) in option.data.statusList" ref="progressLi" :key="index" :style="{fontSize:option.descriptionFontSize}">
                          <span v-if="index !== option.data.statusList.length-1" class="progressLine" :style="{backgroundColor:option.data.nowStatus>item.status?option.activeProgressColor:option.progressColor}"></span>
                          <svg :width="option.descriptionFontSize*2" :height="option.descriptionFontSize*2"  t="1596593804124" class="progress-icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="4761" ><path d="M291.45 829.74a57.44 57.44 0 0 1-21-4 56.69 56.69 0 0 1-36.19-53.07V251.32a57 57 0 0 1 98.76-38.81L614 514.7a179.74 179.74 0 0 1 48.24 122.75v89.73c0 0.48 0 0.79 0.74 1.08a0.92 0.92 0 0 0 1.28-0.29l200.16-215.89L664.23 296.2a0.92 0.92 0 0 0-1.28-0.29c-0.74 0.29-0.74 0.6-0.74 1.08v48.27A56.49 56.49 0 0 1 561 379.84l-4.22-5.45a20 20 0 1 1 31.63-24.48l4.22 5.45a16.51 16.51 0 0 0 24.37 1.93 16.56 16.56 0 0 0 5.21-12V297a41.17 41.17 0 0 1 71.35-28l212.8 229.48a20 20 0 0 1 0 27.2l-212.8 229.49a41.17 41.17 0 0 1-71.35-28v-89.72a139.8 139.8 0 0 0-37.54-95.51l-280.91-302.2a17 17 0 0 0-29.46 11.58v521.36a17 17 0 0 0 29.48 11.56l178.55-192.55a20 20 0 0 1 29.33 27.2L333.11 811.44a56.72 56.72 0 0 1-41.66 18.3z" p-id="4762"  :fill="option.data.nowStatus>=item.status?option.activeProgressColor:option.progressColor"></path></svg>
                          <span :style="{color:option.data.nowStatus>=item.status?option.activeFontColor:option.fontColor}">{{item.label}}</span>
                        </li>         
                      </div>
                   </ul>`,
            });
            Vue.component(`x-private`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: () => {
                            return null;
                        }
                    }
                },
                data() {
                    return {
                        allTemplateList: [],
                        background: null,
                        zoomWidth: 1,
                        zoomHeight: 1,
                        basicConfig: null,
                        loading: true,
                        debounceTimer: null, // 防抖定时器
                        isShowResize: false, // 放大图表的modal
                        willResizeTemplate: [], // 将要放大的组件
                        url: '../iframe/lib/', // 加载js的地址
                        EventSource: null, // 全局SSE source时间
                        nowWindowIndex: 0, // 多桌面模式, 现在处于的桌面序号
                        timer: null, // 定时器
                        // bakAllTemplateList: null, // 备份组件 防止改变了大小改变了原始数据
                        innerZoom: null, // 子元素缩放的倍数
                        isLoadJsList: [], // 已经加载了的js列表
                        cssMerge: '', // 通过id访问的css
                        staticUrl: './', // 静态资源地址
                    }
                },
                created() {
                    this.basicConfig = this.option.baseConfig
                    this.data = this.option.data
                    this.option.templateList.map(item => {
                        const upIndex = item.upIndex || 0 // 获取保存时的upIndex 即所处的桌面序号
                        if (!this.allTemplateList[upIndex]) {
                            this.allTemplateList[upIndex] = []
                        }
                        this.allTemplateList[upIndex].push(item)
                    })
                    this.nowWindowIndex = 0

                    this.loading = true
                    if (!this.basicConfig.zoomMode) {
                        this.basicConfig.zoomMode = { default: 'YOY' }
                    }
                    // 根据当前屏幕尺寸进行缩放达到和编辑器显示的效果一致
                    this.basicConfig.waterMask && vm.addWaterMask('private', this.basicConfig.waterMask, this.$refs.body)
                    this.initTemplateList()
                },
                beforeDestroy() {
                    // 移除监听
                    clearTimeout(this.debounceTimer)
                    clearInterval(this.timer)
                },
                computed: {
                    templateList() {
                        return this.allTemplateList[this.nowWindowIndex]
                    }
                },
                methods: {
                    async onResize() {
                        // 根据当前屏幕尺寸进行缩放达到和编辑器显示的效果一致
                        for (const item of this.templateList) {
                            if (this.basicConfig.zoomMode.default === 'YOY') {
                                this.initElementZoom(item.property)
                            }
                            this.initSize(item.property)
                            item.isLoading = this.guid()
                            this.$forceUpdate()
                                // await this.initData(item)
                        }
                        this.loading = false
                        let zoomHeight = 1
                        if (this.basicConfig.zoomMode.default === 'YOY') {
                            // if (document.documentElement.clientWidth > this.basicConfig.width) {
                            // 实际宽比预设宽大 则按照页面实际高除去 预设放大的高 进行缩放
                            zoomHeight = document.documentElement.clientHeight / (this.innerZoom * this.basicConfig.height)
                            if (zoomHeight > 1) { zoomHeight = 1 }
                            // }
                            this.$refs.body.style.zoom = zoomHeight
                        }
                    },
                    initElementZoom(item) {
                        // 刷新组件的缩放
                        const nowWidth = this.$refs.body && this.$refs.body.offsetWidth
                        const elementWidth = nowWidth / item.width
                        const element = this.$refs[`${item.elementId}Template`]
                        this.innerZoom = ((elementWidth / this.basicConfig.width) * nowWidth) / elementWidth
                        element && (element[0].style.zoom = this.innerZoom)
                    },
                    scrollFunc(e) {
                        if (e.wheelDelta > 0) {
                            this.$refs.carousel.setActiveItem(this.nowWindowIndex + 1)
                        } else {
                            this.$refs.carousel.setActiveItem(this.nowWindowIndex - 1)
                        }
                    },
                    windowChange(e) {
                        // 改变窗口
                        this.nowWindowIndex = e
                        this.$nextTick(() => {
                            this.onResize()
                        })
                    },

                    resizeTemplate(item) {
                        if (item.property.componentsType !== 'L7') {
                            this.isShowResize = true
                            this.willResizeTemplate = item
                        }
                    },
                    async initTemplateList() {
                        // 初始化获取templateList
                        this.initPage()
                    },
                    async initData(template) {
                        const item = template.property
                        switch (item.dataBindType.default) {
                            case 'api':
                                {
                                    if (this.timer) {
                                        clearInterval(this.timer)
                                    }
                                    this.timer = setInterval(async() => {
                                        // 自动更新数据
                                        await this.initApi(template)
                                    }, (item.refresh || 10) * 1000 * 60);
                                    await this.initApi(template)
                                };
                                break;
                            case 'SSE':
                                {
                                    await this.SSEBind()
                                };
                                break;
                        }
                    },
                    initSize(item) {
                        Object.keys(item).map(key => {
                            switch (key) {
                                case 'rotate':
                                    {
                                        const elementRef = this.$refs[`chartBox${item.elementId}`] // 用ref代替
                                        elementRef && (elementRef[0].style.transform = `rotate(${item[key]}deg)`)
                                    };
                                    break;
                                case 'width':
                                case 'height':
                                case 'left':
                                case 'top':
                                    {
                                        if (this.basicConfig.zoomMode.default === 'YOY') {
                                            this.setValue(item, key, item[key])
                                        } else {
                                            let basicConfigKey = key
                                            if (key === 'left') basicConfigKey = 'width'
                                            if (key === 'top') basicConfigKey = 'height'
                                            this.setValue(item, key, `${item[key] / this.basicConfig[basicConfigKey] * 100}%`)
                                        }
                                    };
                                    break;
                                case 'zIndex':
                                    {
                                        this.setValue(item, key, item[key])
                                    };
                                    break;
                            }
                        })
                    },
                    async initPage() {
                        // 渲染数据
                        this.templateList.sort((a, b) => {
                            return a.property.shareApiId ? 1 : -1 // 排序 shareApiId 往后排
                        })
                        await this.$nextTick()
                        this.onResize()
                            // 初始化背景图片的属性
                        if (this.basicConfig.blur) {
                            this.$refs.background.style.filter = `blur(${this.basicConfig.blur}px)`
                        }
                    },
                },
                template: ` <div ref="body" style="width:100%;height:100%">
                      <resize-observer @notify="onResize" />
                      <img id="background"  ref="background" v-if="basicConfig.background" :src="basicConfig.background" />
                      <div class="echartsList" v-if="basicConfig.window">
                      <el-carousel :autoplay="false" @change="windowChange" trigger="click" ref="carousel"
                        v-if="basicConfig.window.length>1">
                        <el-carousel-item v-for="(basicWindow,index) in basicConfig.window" :key="basicWindow">
                          <ul>
                            <li v-for="(item,index) in allTemplateList[index]" :key="item.property.elementId"
                              :ref="item.property.elementId+'Template'" @dblclick="resizeTemplate(item)" class="chart-item"
                              :id="item.property.elementId+'chart-item'">
                              <div :class="[item.property.selfAnimate&&item.property.selfAnimate.default]" :style="{background:'url('+item.property.background+') no-repeat'}">
                              <div class="chart-box animate__animated" :ref="'chartBox'+item.property.elementId"
                                v-show="!item.property.isHidden">
                                <div :id="item.property.elementId" class='main animate__animated'
                                  :class="['animate__'+item.property.animate.default]" v-if="!loading">
                                  <component :ref="item.property.elementId" :key="item.isLoading+item.property.isHidden"
                                    :is="'x-'+(item.property.componentsType=='private'?'private': item.property.type)"
                                    :link="item.property.multLink" :config="item.property.bluePrintConfig"
                                    :option="item.property.option" :id="item.property.elementId" />
                                </div>
                                </div>
                              </div>
                            </li>
                          </ul>
                        </el-carousel-item>
                      </el-carousel>
                      <ul v-else v-for="(basicWindow,index) in basicConfig.window" :key="basicWindow">
                        <li v-for="(item,index) in allTemplateList[index]" :key="item.property.elementId"
                          :ref="item.property.elementId+'Template'" @dblclick="resizeTemplate(item)" class="chart-item"
                          :id="item.property.elementId+'chart-item'">
                          <!-- <div class="title">{{item.property.title}}</div> -->
                          <div :class="[item.property.selfAnimate&&item.property.selfAnimate.default]" :style="{background:'url('+item.property.background+') no-repeat'}">
                             <div class="chart-box animate__animated" :ref="'chartBox'+item.property.elementId"
                            v-show="!item.property.isHidden">
                            <div :id="item.property.elementId" class='main animate__animated'
                              :class="['animate__'+item.property.animate.default]" v-if="!loading">
                             
                              <component :ref="item.property.elementId" :key="item.isLoading+item.property.isHidden"
                                :is="'x-'+(item.property.componentsType=='private'?'private': item.property.type)"
                                :link="item.property.multLink" :config="item.property.bluePrintConfig" :option="item.property.option"
                                :id="item.property.elementId" />
                            </div>
                          </div>
                        </div>
                        </li>
                      </ul>
                      <div ref="background" class="background"
                        :style="{background:basicConfig.background?(basicConfig.background.substr(0,1)==='#' || basicConfig.background&&basicConfig.background.substr(0,1)==='r' )?basicConfig.background: 'url('+basicConfig.background+')':'#0D1D31' }">
                      </div>
                    </div>
                    </div>
                  `,
            });
            Vue.component('x-listAndDetailsAnimation', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                },
                data() {
                    return {
                        currentIndex: 0,
                        timer: null,
                        details: {}
                    }
                },
                mounted() {
                    this.details = this.option.data[this.currentIndex]
                        // this.keyWordsColor()
                    this.init()
                },
                beforeDestroy() {
                    clearInterval(this.timer)
                },
                methods: {
                    // keyWordsColor () {
                    //   // 关键字着色
                    //   if (this.option.selectStyle.default === this.option.selectStyle.option[1].value) {
                    //     const keysWords = this.details && this.details.keywords && this.details.keywords.split(';')
                    //     if (keysWords == undefined || keysWords == '') return;
                    //     keysWords.map(key => {
                    //       const regKey = new RegExp(key, 'g'); // 创建正则表达式对象,不区分大小写,全局查找
                    //       this.$set(this.details, 'details', this.details.details.replace(regKey, `<span style="color:red">${key}</span>`))
                    //     })
                    //   }
                    // },
                    changeTab(index) {
                        this.currentIndex = index
                        this.details = this.option.data[this.currentIndex]
                            // this.keyWordsColor()
                        this.init()
                    },
                    init() {
                        if (this.timer) {
                            clearInterval(this.timer)
                        }
                        this.timer = setInterval(() => {
                            if (this.currentIndex < this.option.data.length - 1) {
                                this.currentIndex++
                                    // this.$ref
                            } else {
                                this.currentIndex = 0
                            }
                            this.details = this.option.data[this.currentIndex]
                                // this.keyWordsColor()
                        }, this.option.Animationtime * 1000);
                    }
                },
                template: `<div v-if="option.selectStyle.default === option.selectStyle.option[0].value "class="listAndDetailsAnimation">
                    <ul class="listAndDetailsAnimationUl">
                      <li v-for="(item,index) in option.data" :key="index" v-if="index<6">
                        <div class="listAndDetailsAnimationMenu" :class="{active:currentIndex === index}">
                          <p :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                          <p :style="{fontSize:option.authorFontSize,color:option.authorColor}"> 作者：{{item.author}}</p>
                          <p :style="{fontSize:option.timeFontSizeFontSize,color:option.timeColor}">发布时间：{{item.publishTime}}</p>
                        </div>
                       
                      </li>
                    </ul>
                      <div class="listAndDetailsAnimationContent">
                        <p :style="{fontSize:option.detailsTitleFontSize,color:option.detailsTitleColor}">{{details.title}}</p>
                        <div class="fromAndTime">
                          <p :style="{fontSize:option.detailsFromFontSize,color:option.detailsFromColor}"><i class="el-icon-user-solid"></i>来源：{{details.from}}</p>
                          <p :style="{fontSize:option.detailsTimeFontSize,color:option.detailsTimeColor}"><i class="el-icon-time"></i>发布时间：{{details.publishTime}}</p>
                        </div>
                        <p :style="{fontSize:option.detailsFontSize,color:option.detailsColor}" v-html="details.details"></p>
                      </div>
                  </div>


                  <div v-else-if="option.selectStyle.default === option.selectStyle.option[1].value" class="listAndDetailsAnimation1">
                    <ul class="listAndDetailsAnimationUl1">
                      <li v-for="(item,index) in option.data" :key="index" v-if="index<6" :class="{active1:currentIndex === index}" @click="changeTab(index)">
                          <span>{{index+1}}</span>
                          <p :style="{fontSize:option.titleFontSize,color:option.titleColor}">{{item.title}}</p>
                          <div>
                            <p :style="{fontSize:option.authorFontSize,color:option.authorColor}"><svg t="1603770033916" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="1350" width="25" height="25"><path d="M512 0.128C229.312 0.128 0.16 229.12 0.16 511.584c0 260.928 195.52 476.224 448.16 507.52 14.24 3.008 31.584 4.768 52.256 4.768 5.792 0 11.392-0.32 16.8-0.864 280.192-2.88 506.464-230.72 506.464-511.424C1023.84 229.12 794.688 0.128 512 0.128zM431.296 973.44C211.04 934.976 43.584 742.944 43.584 511.808c0-33.12 3.456-65.472 10.016-96.64 20.256 21.632 68 21.12 79.616-11.232 20.832 12.416 48.832 14.656 48.832 39.488 0 81.888 2.912 169.696 77.344 171.04 2.08 0 41.472 14.944 60.224 63.552 6.496 16.832 32.128 0 60.256 0 14.048 0 0 23.68 0 74.816 0 50.944 109.856 129.408 109.856 129.408-0.512 33.728 0.864 60.992 3.68 82.784-24.8-0.48-45.696 2.816-62.08 8.416z m196.768-7.296c-2.432-11.904-13.088-18.432-32.48-13.312 15.488-65.952 23.008-102.88 55.36-130.944 46.72-40.544 5.536-85.632-30.048-80.32-28.064 4.256-10.336-34.72-35.36-36.896-25.056-2.08-57.728-51.872-93.76-69.024-19.104-9.056-37.888-33.376-67.36-34.464-26.112-1.024-64.256 22.08-64.256 4.256 0-57.312-5.824-98.24-7.008-114.56-0.96-13.12-8.576-4.416 26.72-3.584 19.2 0.512 9.824-38.592 28.864-40.096 18.656-1.472 63.168 17.472 74.496 9.92 10.56-7.04 77.44 175.584 77.44 30.176 0-17.248-8.96-47.232 0-63.584 35.328-64.544 68.384-117.184 65.44-124.896-1.696-4.32-36.16-7.904-63.744 1.344-9.28 3.136 2.976 17.696-10.4 20.8-50.08 11.584-94.336-13.504-78.848-37.056 15.872-24.128 73.376-10.528 78.4-58.976 2.88-27.744 5.312-59.872 6.912-83.744 67.424 10.528 60-87.488-40.224-97.984 202.752 2.368 374.56 133.312 437.6 315.04a19.104 19.104 0 0 0-11.2-5.12c-30.272-75.68-103.84-20.896-78.88 45.856-133.664 102.784-99.456 174.464-55.552 215.488 23.136 21.568 45.152 54.016 59.52 77.312-15.616 45.536 57.504 27.328 93.6-49.952a469.696 469.696 0 0 1-335.232 324.32z m312.96-546.624a439.904 439.904 0 0 1 9.632 99.296 501.728 501.728 0 0 0-9.984-74.752c0.448-8.672 0.576-16.896 0.352-24.544z" p-id="1351" fill="#ffffff"></path></svg>{{item.author}}</p>
                            <p :style="{fontSize:option.timeFontSizeFontSize,color:option.timeColor}"><svg t="1603770157951" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="2336" width="25" height="25"><path d="M512 1024c-281.6 0-512-230.4-512-512 0-281.6 230.4-512 512-512s512 230.4 512 512C1024 793.6 793.6 1024 512 1024zM512 64C262.4 64 64 262.4 64 512c0 249.6 198.4 448 448 448s448-198.4 448-448C960 262.4 761.6 64 512 64z" p-id="2337" fill="#ffffff"></path><path d="M729.6 544 512 544C492.8 544 480 524.8 480 512L480 179.2c0-19.2 12.8-32 32-32s32 12.8 32 32l0 294.4 185.6 0c19.2 0 32 12.8 32 32S748.8 544 729.6 544z" p-id="2338" fill="#ffffff"></path></svg>{{item.publishTime}}</p>
                          </div>
                       
                      </li>
                    </ul>
                      <div class="listAndDetailsAnimationContent1">
                        <p :style="{fontSize:option.detailsTitleFontSize,color:option.detailsTitleColor}">{{details.title}}</p>
                        <div class="fromAndTime1">
                          <p :style="{fontSize:option.detailsFromFontSize,color:option.detailsFromColor}"><svg t="1596787655908" class="icon" viewBox="0 0 1024 1024" version="1.1" xmlns="http://www.w3.org/2000/svg" p-id="3424" :width="option.detailsFromFontSize" :height="option.detailsFromFontSize"><path d="M1023.968793 512.0972c0-282.258242-228.984556-511.073966-511.452563-511.073966-282.473122 0-511.462795 228.815722-511.462795 511.073966 0 260.737573 195.390741 475.854231 447.837044 507.156 14.231147 2.999101 31.564741 4.746785 52.209522 4.746785 5.795601 0 11.384509-0.304924 16.78207-0.857471C797.877943 1020.265179 1023.968793 792.575015 1023.968793 512.0972zM950.836169 519.328399c-1.471411-25.500029-4.8399-50.460814-9.969375-74.718637 0.455339-8.661681 0.579151-16.868022 0.346877-24.49726 6.343032 29.660502 9.687986 60.432236 9.687986 91.984698C950.902679 514.513057 950.875051 516.921751 950.836169 519.328399zM74.120572 512.0972c0-30.977405 3.225236-61.200685 9.345202-90.360825 18.931886 20.247766 63.554125 19.769915 74.436224-10.483039 19.471131 11.604504 45.637286 13.717484 45.637286 36.912165 0 76.550227 2.725897 158.618759 72.279247 159.886547 1.958471 0.025581 38.788778 13.957944 56.316786 59.416164 6.060619 15.711767 30.032959 0 56.321902 0 13.124008 0 0 22.110053 0 69.921714 0 47.626454 102.680569 120.959633 102.680569 120.959633-0.475804 31.525858 0.818588 57.017702 3.442161 77.38314-23.177287-0.426689-42.709813 2.645062-58.055262 7.868674C230.627375 907.644909 74.120572 728.142955 74.120572 512.0972zM620.440877 936.783561c-2.272604-11.126653-12.215375-17.220015-30.356301-12.451742 14.474677-61.640676 21.511461-96.169728 51.728602-122.387045 43.719746-37.898564 5.206218-80.04355-28.063232-75.076769-26.222433 3.958895-9.651149-32.467234-33.055594-34.481983-23.404445-1.958471-53.969486-48.511552-87.653346-64.530291-17.855443-8.479545-35.402894-31.203539-62.940184-32.221658-24.407215-0.946492-60.07615 20.637618-60.07615 3.999824 0-53.590889-5.426213-91.832236-6.541539-107.104012-0.900446-12.269607-8.020113-4.132845 24.974087-3.339838 17.956744 0.48092 9.185577-36.067997 26.959162-37.495409 17.456382-1.381367 59.052916 16.341056 69.650557 9.277668 9.845564-6.577352 72.371338 164.12683 72.371338 28.216717 0-16.126177-8.351641-44.163828 0-59.436629 33.030013-60.352424 63.952163-109.539311 61.175104-116.734697-1.575781-4.050986-33.792323-7.39594-59.569649 1.253462-8.699541 2.904963 2.766826 16.530355-9.727892 19.440434-46.814006 10.807404-88.175196-12.622623-73.691309-34.645701 14.831785-22.570509 68.571044-9.845564 73.282016-55.124718 2.710549-25.935927 4.956549-55.974003 6.45968-78.298935 63.004648 9.852726 56.069163-81.7677-37.613081-91.574381 189.525561 2.217349 350.128371 124.61565 409.062591 294.48692-2.980683-2.718734-6.448425-4.371258-10.453365-4.774413-28.324157-70.749511-97.074267-19.547874-73.752703 42.855112-124.959457 96.057172-92.973143 163.052434-51.9179 201.416569 21.603552 20.166931 42.200242 50.496628 55.610754 72.279247-14.596442 42.561444 53.781211 25.518448 87.503954-46.709636C890.911457 782.384621 771.249286 898.633281 620.440877 936.783561z" p-id="3425" :fill="option.detailsFromColor"></path></svg>来源：{{details.from}}</p>
                          <p :style="{fontSize:option.detailsTimeFontSize,color:option.detailsTimeColor}"><i class="el-icon-time"></i>发布时间：{{details.publishTime}}</p>
                        </div>
                        <div class="details">
                          <p :style="{fontSize:option.detailsFontSize,color:option.detailsColor}" v-html="details.details"></p>
                        </div>
                      </div>
                  </div>`,
            });


            Vue.component(`x-areaPoint`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler() {
                            this.initChart()
                        },
                    }
                },
                data() {
                    return {
                        // id: '',
                        chartOption: {
                            geo: {
                                regions: [{
                                    name: '南海诸岛',
                                    value: 0,
                                    itemStyle: {
                                        normal: {
                                            opacity: 0,
                                            label: {
                                                show: false,
                                            },
                                        },
                                    },
                                }, ],
                            },
                            visualMap: {
                                calculable: true,
                                show: false,
                            },
                            series: [{
                                name: 'line',
                                type: 'lines',
                                zlevel: 6,
                                effect: {
                                    show: true,
                                    period: 4, // 箭头指向速度，值越小速度越快
                                    trailLength: 0.02, // 特效尾迹长度[0,1]值越大，尾迹越长重
                                    // symbol: 'arrow', //箭头图标
                                    symbolSize: 8, // 图标大小
                                },

                            }, {
                                type: 'effectScatter',
                                symbol: 'circle',
                                zlevel: 2,
                                coordinateSystem: 'geo',
                                symbolSize: 10,
                                rippleEffect: {
                                    period: 4, // 动画时间，值越小速度越快
                                    brushType: 'stroke', // 波纹绘制方式 stroke, fill
                                    scale: 6, // 波纹圆环最大限制，值越大波纹越大
                                }
                            }]
                        }
                    }
                },
                // created () {
                //   this.id = vm.guid()
                // },
                mounted() {
                    this.initChart()
                    this.myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' });
                },
                beforeDestroy() {
                    this.myChart.clear()
                },
                methods: {
                    async initLaLong() {
                        await Promise.all(this.option.data.map(async(item, index) => {
                            // 地理转坐标
                            return (async() => {
                                const { data } = await axios.get(`https://restapi.amap.com/v3/geocode/geo?key=502123a4f08bd95be55b49ae6eabd728&address=${item.city}`)
                                const laLongString = data.geocodes[0].location
                                const laLong = [Number(laLongString.split(',')[0]), Number(laLongString.split(',')[1])]
                                const endLine = [Number(this.option.endLine[index].split(',')[0]), Number(this.option.endLine[index].split(',')[1])]
                                this.chartOption.series[0].data.push({
                                    coords: [laLong, endLine],
                                    lineStyle: {
                                        opacity: 1,
                                        color: '#16e820',
                                        width: 2,
                                    }
                                })
                                this.chartOption.series[1].data.push(laLong)
                                this.chartOption.series[1].data.push(endLine)
                            })()
                        }))
                    },
                    async initChart() {
                        this.chartOption = vm.MergeRecursive(JSON.parse(JSON.stringify(this.chartOption)), JSON.parse(JSON.stringify(this.option)))
                        this.chartOption.series[0].data = []
                        this.chartOption.series[1].data = []
                        this.chartOption.series.length = 2
                        await this.initLaLong()
                        this.myChart.setOption(this.chartOption, true);
                        this.myChart.resize();
                    },
                    handleResize() {
                        vm.debounce(this.myChart.resize, 200)
                    }
                },
                template: `<div class="full">
        <div :id="id" class="full"></div>
        <resize-observer @notify="handleResize" />
        </div>`,
            });
            Vue.component(`x-dashBoard`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler() {
                            this.initChart()
                        },
                    }
                },
                data() {
                    return {
                        // id: '',
                        chartOption: {
                            series: [{
                                type: 'gauge',
                                detail: { formatter: '{value}' },
                            }],
                        }
                    }
                },
                mounted() {
                    this.initChart()
                },
                methods: {
                    initChart() {
                        this.chartOption = vm.MergeRecursive(JSON.parse(JSON.stringify(this.chartOption)), JSON.parse(JSON.stringify(this.option)))
                        this.option.data.forEach((item, index) => {
                            this.chartOption.series[index] = {...this.chartOption.series[index], ...item }
                        })
                        const myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' }); // svg渲染 防止放大导致模糊
                        myChart.setOption(this.chartOption, true);
                        myChart.resize();
                    },
                    handleResize() {
                        vm.debounce(this.myChart.resize, 200)
                    }
                },
                template: `<div class="full">
        <div :id="id" class="full"></div>
        <resize-observer @notify="handleResize" />
        </div>`,
            });
            Vue.component(`x-funnel`, {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler() {
                            this.initChart()
                        },
                        // deep: true,
                        // immediate: true,
                    }
                },
                data() {
                    return {
                        chartOption: {}
                    }
                },
                mounted() {
                    this.initChart()
                },
                methods: {
                    initChart() {
                        this.chartOption = vm.MergeRecursive(JSON.parse(JSON.stringify(this.chartOption)), JSON.parse(JSON.stringify(this.option)))
                        this.option.data.forEach((item, index) => {
                            this.chartOption.series[index] = {...this.chartOption.series[index], ...item }
                        })
                        const myChart = echarts.init(document.getElementById(this.id), null, { renderer: 'canvas' }); // svg渲染 防止放大导致模糊
                        myChart.setOption(this.chartOption, true);
                        myChart.resize();
                    },
                    handleResize() {
                        vm.debounce(this.myChart.resize, 200)
                    }
                },
                template: `<div class="full">
        <div :id="id" class="full"></div>
        <resize-observer @notify="handleResize" />
        </div>`,
            });
            Vue.component('x-weather', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                watch: {
                    option: {
                        handler() {
                            this.initWeather()
                        },
                        deep: true,
                        // immediate: true,
                    }
                },
                data() {
                    return {
                        data: {
                            weather: '晴',
                            city: '成都市',
                            temperature: 0,
                        }
                    }
                },
                mounted() {
                    this.initWeather()
                },
                methods: {
                    async initWeather() {
                        // 查询当前位置天气
                        const { data } = await axios.get(`https://restapi.amap.com/v3/weather/weatherInfo?key=502123a4f08bd95be55b49ae6eabd728&city=${this.option.address}&extensions=base`)
                        this.data = {...this.data, ...data.lives[0] }
                    },
                    handleResize() {
                        this.initWeather()
                    }
                },
                template: `<div class="full">
        <div :id="id" class="weather" >
          <object class="weather-svg"  :data="vm.staticUrl+'/image/weather/'+data.weather+'.svg'"></object>
          <div :style="{color:option.color,fontSize:option.fontSize}">
            <span>{{data.city}}</span>
            <span>{{data.temperature}}° {{data.weather}}</span>
          </div>
        </div>
        <resize-observer @notify="handleResize" />
        </div>`
            })
            Vue.component('x-wave', {
                props: {
                    option: {
                        type: Object,
                        default: () => {
                            return {};
                        },
                    },
                    id: {
                        type: String,
                        default: ''
                    }
                },
                mounted() {
                    this.init()
                },
                methods: {
                    init() {
                        // Init Context
                        const c = document.createElement('canvas').getContext('2d')
                        const postctx = document.getElementById(`${this.id}wave`).getContext('2d')
                        const { canvas } = c

                        const vertices = []

                        // Effect Properties
                        const { vertexCount, vertexSize, oceanWidth, oceanHeight, gridSize, waveSize, perspective } = this.option
                            // Common variables
                        const depth = (vertexCount / oceanWidth * gridSize)
                        let frame = 0
                        const { sin, cos, tan, PI } = Math

                        // Render loop
                        const loop = () => {
                            const rad = sin(frame / 100) * PI / 20
                            const rad2 = sin(frame / 50) * PI / 10
                            frame++
                            if (postctx.canvas.width !== postctx.canvas.offsetWidth || postctx.canvas.height !== postctx.canvas.offsetHeight) {
                                postctx.canvas.width = canvas.width = postctx.canvas.offsetWidth
                                postctx.canvas.height = canvas.height = postctx.canvas.offsetHeight
                            }


                            c.fillStyle = `hsl(200deg, 100%, 2%)`
                            c.fillRect(0, 0, canvas.width, canvas.height)
                            c.save()
                            c.translate(canvas.width / 2, canvas.height / 2)

                            c.beginPath()
                            vertices.forEach((vertex, i) => {
                                const ni = i + oceanWidth
                                let x = vertex[0] - frame % (gridSize * 2)
                                let z = vertex[2] - frame * 2 % gridSize + (i % 2 === 0 ? gridSize / 2 : 0)
                                const wave = (cos(frame / 45 + x / 50) - sin(frame / 20 + z / 50) + sin(frame / 30 + z * x / 10000))
                                let y = vertex[1] + wave * waveSize
                                const a = Math.max(0, 1 - (Math.sqrt(x ** 2 + z ** 2)) / depth)
                                let tx;
                                let ty;
                                let tz

                                y -= oceanHeight

                                // Transformation variables
                                tx = x
                                ty = y
                                tz = z

                                // Rotation Y
                                tx = x * cos(rad) + z * sin(rad)
                                tz = -x * sin(rad) + z * cos(rad)

                                x = tx
                                y = ty
                                z = tz

                                // Rotation Z
                                tx = x * cos(rad) - y * sin(rad)
                                ty = x * sin(rad) + y * cos(rad)

                                x = tx;
                                y = ty;
                                z = tz;

                                // Rotation X

                                ty = y * cos(rad2) - z * sin(rad2)
                                tz = y * sin(rad2) + z * cos(rad2)

                                x = tx;
                                y = ty;
                                z = tz;

                                x /= z / perspective
                                y /= z / perspective



                                if (a < 0.01) return
                                if (z < 0) return


                                c.globalAlpha = a
                                c.fillStyle = `hsl(${180 + wave * 20}deg, 100%, 50%)`
                                c.fillRect(x - a * vertexSize / 2, y - a * vertexSize / 2, a * vertexSize, a * vertexSize)
                                c.globalAlpha = 1
                            })
                            c.restore()

                            // Post-processing
                            if (canvas.width === 0 || canvas.height === 0) return;
                            postctx.drawImage(canvas, 0, 0)

                            postctx.globalCompositeOperation = "screen"
                            postctx.filter = 'blur(16px)'
                            postctx.drawImage(canvas, 0, 0)
                            postctx.filter = 'blur(0)'
                            postctx.globalCompositeOperation = "source-over"

                            requestAnimationFrame(loop)
                        }

                        // Generating dots
                        for (let i = 0; i < vertexCount; i++) {
                            const x = i % oceanWidth
                            const y = 0
                            const z = i / oceanWidth >> 0
                            const offset = oceanWidth / 2
                            vertices.push([(-offset + x) * gridSize, y * gridSize, z * gridSize])
                        }
                        loop()
                    }
                },
                template: `<canvas :id="id+'wave'" class="full"></canvas>`
            })

        },

    },
};